Name,lrml_f_score,lrml_f_score_test,bleu_test,State,User,Created,Runtime,adafactor,bs,dataset,early_stopping,early_stopping_threshold,epochs,eval_steps,eval_strategy,evaluate_only,evaluation_set,exp_num,fp16,gradient_accumulation_steps,is_ir,label_augmentation,lr,lr_scheduler_type,max_length,metric_for_best_model,model_name,model_path,num_beams,num_warmup_steps,post_process,predict_with_generate,retrain,run_name,runs,seed,skip_evals,split,start_epoch,teacher_forcing_percentage,weight_decay,write_predictions,RANDOM_INPUT,RANDOM_INPUT_test,RANDOM_LABEL,RANDOM_LABEL_EVAL,RANDOM_LABEL_EVAL_test,RANDOM_LABEL_test,RANDOM_PRED,RANDOM_PRED_EVAL,RANDOM_PRED_EVAL_test,RANDOM_PRED_test,bleu,brevity_penalty,brevity_penalty_test,eval_epoch,eval_epoch_test,ir_change_ratio,ir_change_ratio_test,length_ratio,length_ratio_test,lrml_precision,lrml_precision_test,lrml_recall,lrml_recall_test,precisions,precisions_test,prediction,reference_length,reference_length_test,translation_length,translation_length_test
t5-amr_ir-rev_1_base_no_gen_not_removed_doc_split_esp20_e20_44,59.55310370290376,45.930900310536174,0.5815664008258532,finished,stefanfuchs164,2024-03-14T23:45:02.000Z,6058,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,1,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_1_base_no_gen_not_removed_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,FALSE,translate English to LegalRuleML: E1AS1 Boundary fences and other site development must not significantly hamper the flow of surface water from the site.,translate English to LegalRuleML: G14VM1 1.7.1 Separate systems shall be provided to convey and store industrial liquid wastes that require different treatment and/or disposal methods.,"if( expression( function( is), atom( variable( site development)), data( true))), then( and( prohibition( not( expression( function( include), atom( variable( site development)), data( obstruction)))), expression( function( to), atom( variable( obstruction)), data( surface water flow))))","[""if( expression( function( is), atom( variable( site development)), data( true))), then( and( prohibition( not( expression( function( include), atom( variable( site development)), data( obstruction)))), expression( function( to), atom( variable( obstruction)), data( surface water flow))))""]","[""if( expression( function( greater than), expression( function( count), atom( relation( disposal method), variable( industrial liquid waste))), data( 1))), then( expression( rulestatement( expression( expression( function( for each), atom( variable( disposal method))))), appliedstatement( obligation( expression( function( is), atom( variable( disposal system)), data( unique))))))""]","if( expression( function( greater than), expression( function( count), atom( relation( disposal method), variable( industrial liquid waste))), data( 1))), then( expression( rulestatement( expression( expression( function( for each), atom( variable( disposal method))))), appliedstatement( obligation( expression( function( is), atom( variable( disposal system)), data( unique))))))","if( and( expression( function( has), atom( variable( site)), data( boundary fence)), expression( function( has), atom( variable( site)), data( development)), expression( function( has), atom( variable( site)), data( surface water)))), then( prohibition( expression( function( has), atom( variable( surface water)), data( hamper))))","if( and( expression( function( has), atom( variable( site)), data( boundary fence)), expression( function( has), atom( variable( site)), data( development)), expression( function( has), atom( variable( site)), data( surface water)))), then( prohibition( expression( function( has), atom( variable( surface water)), data( hamper))))","if( and( expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( has), atom( variable( waste)), data( treatment)), expression( function( has), atom( variable( waste)), data( disposal)))), then( obligation( expression( function( has), atom( variable( waste)), data( separation system))))","if( and( expression( function( is), atom( relation( type), variable( waste)), data( industrial liquid)), expression( function( has), atom( variable( waste)), data( treatment)), expression( function( has), atom( variable( waste)), data( disposal)))), then( obligation( expression( function( has), atom( variable( waste)), data( separation system))))",0.6772509811836043,0.9003167253522244,1,14,19,1,1,0.9049702828032132,1.0875075437537718,61.80644575348349,46.91541934190795,57.45828701030496,44.986852217376445,"[0.8513279445727483,0.7900732893113708,0.722530278710054,0.6588658205560854]","[0.7244173140954495,0.63826222917132,0.5434929197572488,0.4552137525446732]",,15311,8285,13856,9010
t5-amr_ir-rev_1_base_no_gen_not_removed_doc_split_esp20_e20_43,60.756927255224504,46.43486730687629,0.5853535985728373,finished,stefanfuchs164,2024-03-14T23:45:01.000Z,6139,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,1,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_1_base_no_gen_not_removed_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,FALSE,"translate English to LegalRuleML: E2AS1 Timber used to construct decks, enclosed balustrades and other attachments such as pergolas shall comply with B2/AS1.","translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: Any spilled waste shall: i) be contained on-site for subsequent removal, ii) not enter the surface water system.","if( and( or( expression( function( is), atom( variable( construction)), data( deck)), expression( function( is), atom( variable( construction)), data( balustrade)), expression( function( is), atom( variable( construction)), data( pergolas))), expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( is), atom( variable( balustrade)), data( enclosed)))), then( obligation( expression( function( comply with), atom( variable( timber)), data( nzbc b2as1))))","[""if( and( or( expression( function( is), atom( variable( construction)), data( deck)), expression( function( is), atom( variable( construction)), data( balustrade)), expression( function( is), atom( variable( construction)), data( pergolas))), expression( function( is), atom( relation( material), variable( construction)), data( timber)), expression( function( is), atom( variable( balustrade)), data( enclosed)))), then( obligation( expression( function( comply with), atom( variable( timber)), data( nzbc b2as1))))""]","[""if( and( expression( function( is), atom( relation( purpose), variable( vehicle access)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( and( or( obligation( expression( function( has), atom( relation( disposal method), variable( spillage)), data( containment))), obligation( expression( function( has), atom( relation( disposal method), variable( spillage)), data( bunding)))), prohibition( expression( function( to), atom( relation( flow), variable( spillage)), data( surface water system)))))""]","if( and( expression( function( is), atom( relation( purpose), variable( vehicle access)), data( collection)), expression( function( is), atom( relation( type), variable( collection)), data( industrial liquid waste)))), then( and( or( obligation( expression( function( has), atom( relation( disposal method), variable( spillage)), data( containment))), obligation( expression( function( has), atom( relation( disposal method), variable( spillage)), data( bunding)))), prohibition( expression( function( to), atom( relation( flow), variable( spillage)), data( surface water system)))))","if( and( expression( function( is), atom( relation( construction), variable( timber)), data( deck)), expression( function( is), atom( relation( construction), variable( timber)), data( balustrade)), expression( function( is), atom( relation( construction), variable( timber)), data( enclosed)), expression( function( is), atom( relation( construction), variable( timber)), data( pergola)))), then( obligation( expression( function( comply with), atom( variable( timber)), data( nzbc b2as1))))","if( and( expression( function( is), atom( relation( construction), variable( timber)), data( deck)), expression( function( is), atom( relation( construction), variable( timber)), data( balustrade)), expression( function( is), atom( relation( construction), variable( timber)), data( enclosed)), expression( function( is), atom( relation( construction), variable( timber)), data( pergola)))), then( obligation( expression( function( comply with), atom( variable( timber)), data( nzbc b2as1))))","if( expression( function( is), atom( relation( type), variable( access area)), data( vehicle))), then( and( obligation( expression( function( is), atom( relation( type), variable( access area)), data( spilled waste))), obligation( expression( function( is), atom( relation( location), variable( access area)), data( on-site))), obligation( expression( function( is), atom( relation( type), variable( access area)), data( subsequent removal))), obligation( expression( function( is), atom( relation( type), variable( access area)), data( surface water system)))))","if( expression( function( is), atom( relation( type), variable( access area)), data( vehicle))), then( and( obligation( expression( function( is), atom( relation( type), variable( access area)), data( spilled waste))), obligation( expression( function( is), atom( relation( location), variable( access area)), data( on-site))), obligation( expression( function( is), atom( relation( type), variable( access area)), data( subsequent removal))), obligation( expression( function( is), atom( relation( type), variable( access area)), data( surface water system)))))",0.6957790479353041,0.9243215931735398,1,16,19,1,1,0.9270459147018484,1.1254073627036814,62.35061539627862,45.737431632321915,59.242678305792914,47.15390229598645,"[0.853811469635057,0.7909200368298038,0.7231557960694959,0.6574557949745866]","[0.7331617331617332,0.6463098834700043,0.545049934867564,0.4545653123634775]",,15311,8285,14194,9324
t5-amr_ir-rev_1_base_no_gen_not_removed_doc_split_esp20_e20_42,59.37261010194918,43.29286770936984,0.4715604321431988,finished,stefanfuchs164,2024-03-14T23:44:56.000Z,6267,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,1,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_1_base_no_gen_not_removed_doc_split_esp20_e20_42,1,42,0,doc_split,0,0,0.1,FALSE,"translate English to LegalRuleML: G13AS2 4.1.2 Every main drain, and every branch drain longer than 10 m, shall be ventilated in accordance with Table 3.",translate English to LegalRuleML: G14VM1 1.8.1 Vehicle access areas for the collection of industrial liquid waste shall: Any spilled waste shall not enter the sewage system unless the spilled waste is acceptable as a discharge to the sewer by the network utility operator.,"if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( expression( function( comply with), atom( variable( drain)), data( nzbc nz nzbc-g13as2 t3))))","[""if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( expression( function( comply with), atom( variable( drain)), data( nzbc nz nzbc-g13as2 t3))))""]","[""if( and( expression( function( is), atom( relation( purpose), variable( vehicle access)), data( collection)), expression( function( is), atom( relation( content), variable( collection)), data( industrial liquid waste)), permission( not( expression( function( to), atom( relation( discharge), variable( spillage)), data( sewer)))))), then( prohibition( expression( function( to), atom( relation( flow), variable( spillage)), data( sewer))))""]","if( and( expression( function( is), atom( relation( purpose), variable( vehicle access)), data( collection)), expression( function( is), atom( relation( content), variable( collection)), data( industrial liquid waste)), permission( not( expression( function( to), atom( relation( discharge), variable( spillage)), data( sewer)))))), then( prohibition( expression( function( to), atom( relation( flow), variable( spillage)), data( sewer))))","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( less than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 100.0))))), then( and( obligation( expression( function( comply with), atom( relation( ventilation), variable( drain)), data( nzbc g13as2 t3))), obligation( expression( function( comply with), atom( relation( ventilation), variable( drain)), data( nzbc g13as2 t3)))))","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( less than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 100.0))))), then( and( obligation( expression( function( comply with), atom( relation( ventilation), variable( drain)), data( nzbc g13as2 t3))), obligation( expression( function( comply with), atom( relation( ventilation), variable( drain)), data( nzbc g13as2 t3)))))","if( and( expression( function( is), atom( relation( type), variable( access area)), data( vehicle)), expression( function( for), atom( relation( collection), variable( waste)), data( industrial liquid)))), then( and( prohibition( expression( function( enter), atom( variable( access area)), data( sewage system))), prohibition( expression( function( comply with), atom( relation( discharge), variable( waste)), data( network utility operator)))))","if( and( expression( function( is), atom( relation( type), variable( access area)), data( vehicle)), expression( function( for), atom( relation( collection), variable( waste)), data( industrial liquid)))), then( and( prohibition( expression( function( enter), atom( variable( access area)), data( sewage system))), prohibition( expression( function( comply with), atom( relation( discharge), variable( waste)), data( network utility operator)))))",0.6945970223598091,1,1,19,19,1,1,1.0332440728887728,1.3993964996982498,59.72506257616097,41.99898759678567,59.02429304334085,44.66900412094012,"[0.7927307206068268,0.732486503651953,0.6653477983407785,0.6025008015389548]","[0.6015180265654649,0.5254810192407696,0.4360738547291413,0.35874321722387537]",,15311,8285,15820,11594
t5-amr_ir-rev_1_base_no_gen_not_removed_random_split_esp20_e20_44,62.891974402927666,60.07912775905998,0.6900852536742721,finished,stefanfuchs164,2024-03-14T21:04:15.000Z,9643,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,1,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_1_base_no_gen_not_removed_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,FALSE,"translate English to LegalRuleML: CAS2 1.4.6 For the purposes of risk group SI the term 'bed' means the number of people that are under care or detention. It can include people on: a) Beds, or b) Recliner or lounge chairs, or c) Dentist chairs, or d) Treatment tables, or e) Any other furniture where an occupant may be for a period of treatment, in care or detention.",translate English to LegalRuleML: E2AS1 Valley gutters be minimum 250 mm wide where receiving run off from spreaders.,"if( and( or( expression( function( is), atom( relation( activity), variable( space)), data( sleeping)), expression( function( is), atom( relation( risk group), variable( space)), data( si))), expression( function( define), expression( function( count), atom( variable( bed))), data( x0)), or( expression( function( include), atom( variable( bed)), data( recliner)), expression( function( include), atom( variable( bed)), data( lounge chair)), expression( function( include), atom( variable( bed)), data( dentist chair)), expression( function( include), atom( variable( bed)), data( treatment table)), expression( function( include), atom( variable( bed)), data( treatment furniture))))), then( and( obligation( expression( function( is), atom( variable( x0)), data( occupant load))), expression( function( for), atom( variable( x0)), data( fire safety design))))","[""if( and( or( expression( function( is), atom( relation( activity), variable( space)), data( sleeping)), expression( function( is), atom( relation( risk group), variable( space)), data( si))), expression( function( define), expression( function( count), atom( variable( bed))), data( x0)), or( expression( function( include), atom( variable( bed)), data( recliner)), expression( function( include), atom( variable( bed)), data( lounge chair)), expression( function( include), atom( variable( bed)), data( dentist chair)), expression( function( include), atom( variable( bed)), data( treatment table)), expression( function( include), atom( variable( bed)), data( treatment furniture))))), then( and( obligation( expression( function( is), atom( variable( x0)), data( occupant load))), expression( function( for), atom( variable( x0)), data( fire safety design))))""]","[""if( and( expression( function( is), atom( relation( type), variable( gutter)), data( valley)), expression( function( into), atom( relation( discharge), variable( spreader)), data( gutter)))), then( obligation( expression( function( greater than equal), atom( relation( width), variable( gutter)), data( baseunit( kind( metre), prefix( milli)), value( 250.0)))))""]","if( and( expression( function( is), atom( relation( type), variable( gutter)), data( valley)), expression( function( into), atom( relation( discharge), variable( spreader)), data( gutter)))), then( obligation( expression( function( greater than equal), atom( relation( width), variable( gutter)), data( baseunit( kind( metre), prefix( milli)), value( 250.0)))))","if( and( expression( function( is), atom( relation( risk group), variable( space)), data( si)), expression( function( is), atom( relation( type), variable( space)), data( bed)), expression( function( is), atom( relation( type), variable( space)), data( recliner)), expression( function( is), atom( relation( type), variable( space)), data( lounge chair)), expression( function( is), atom( relation( type), variable( space)), data( dentist chair)), expression( function( is), atom( relation( type), variable( space)), data( treatment table)), expression( function( is), atom( relation( type), variable( space)), data( furniture)), expression( function( is), atom( relation( type), variable( furniture)), data( treatment)), expression( function( is), atom( relation( type), variable( furniture)), data( other)), expression( function( is), atom( relation( type), variable( furniture)), data( occupant))))), then( permission( expression( function( equal), atom( relation( key), variable( bed)), data( x0))))","if( and( expression( function( is), atom( relation( risk group), variable( space)), data( si)), expression( function( is), atom( relation( type), variable( space)), data( bed)), expression( function( is), atom( relation( type), variable( space)), data( recliner)), expression( function( is), atom( relation( type), variable( space)), data( lounge chair)), expression( function( is), atom( relation( type), variable( space)), data( dentist chair)), expression( function( is), atom( relation( type), variable( space)), data( treatment table)), expression( function( is), atom( relation( type), variable( space)), data( furniture)), expression( function( is), atom( relation( type), variable( furniture)), data( treatment)), expression( function( is), atom( relation( type), variable( furniture)), data( other)), expression( function( is), atom( relation( type), variable( furniture)), data( occupant))))), then( permission( expression( function( equal), atom( relation( key), variable( bed)), data( x0))))","if( and( expression( function( is), atom( relation( type), variable( gutter)), data( valley)), expression( function( is), atom( relation( type), variable( gutter)), data( receiving runoff)), expression( function( from), atom( relation( spreader), variable( gutter)), data( spreader)))), then( obligation( expression( function( greater than equal), atom( relation( width), variable( gutter)), data( baseunit( prefix( milli), kind( metre)), value( 250.0)))))","if( and( expression( function( is), atom( relation( type), variable( gutter)), data( valley)), expression( function( is), atom( relation( type), variable( gutter)), data( receiving runoff)), expression( function( from), atom( relation( spreader), variable( gutter)), data( spreader)))), then( obligation( expression( function( greater than equal), atom( relation( width), variable( gutter)), data( baseunit( prefix( milli), kind( metre)), value( 250.0)))))",0.6929360782396818,0.9259711862290952,0.9934078000857216,19,19,1,1,0.9285808406904732,0.993429433,64.38295983083572,61.19669558467017,61.468482656702186,59.00164571081397,"[0.843976160068114,0.783936086739425,0.7200229489386116,0.6583026894512942]","[0.8042113788216239,0.7302943969610636,0.6605304424899434,0.6002604166666666]",,15178,14915,14094,14817
t5-amr_ir-rev_1_base_no_gen_not_removed_random_split_esp20_e20_43,59.76132769993265,57.86262723774384,0.6572056048627813,finished,stefanfuchs164,2024-03-14T21:04:13.000Z,9644,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,1,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_1_base_no_gen_not_removed_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,FALSE,"translate English to LegalRuleML: G15AS1 3.0.7 A water supply tap, complying with NZBC G12, shall be provided for washing down common waste storage areas.","translate English to LegalRuleML: E2AS1 8.4 Profiled Metal Roof Cladding d) Where end-laps are required in flashings, form these as shown in Figure 6 and, before joining the two parts, apply an 8 mm diameter bead of neutral cure sealant complying with: i) Type F, Class 20LM or 25LM of ISO 11600, or ii) low modulus Type II Class A of Federal Specification TT-S-00230C.","if( expression( function( is), atom( relation( type), variable( waste storage area)), data( common))), then( and( obligation( expression( function( greater than), expression( function( count), atom( variable( water supply tap))), data( 1))), obligation( expression( function( comply with), atom( variable( water supply tap)), data( nzbc g12)))))","[""if( expression( function( is), atom( relation( type), variable( waste storage area)), data( common))), then( and( obligation( expression( function( greater than), expression( function( count), atom( variable( water supply tap))), data( 1))), obligation( expression( function( comply with), atom( variable( water supply tap)), data( nzbc g12)))))""]","[""if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( for), atom( variable( flashing)), data( cladding)), obligation( expression( function( has), atom( variable( flashing)), data( end lap))))), then( and( obligation( expression( function( has), atom( relation( joint), variable( flashing)), data( bead))), obligation( expression( function( is), atom( relation( type), variable( bead)), data( sealant))), obligation( expression( function( equal), atom( relation( diameter), variable( bead)), data( baseunit( kind( metre), prefix( milli)), value( 8.0)))), obligation( expression( function( is), atom( relation( type), variable( sealant)), data( neutral cure))), or( obligation( expression( function( comply with), atom( variable( sealant)), data( iso 11600 class 20lm type f))), obligation( expression( function( comply with), atom( variable( sealant)), data( iso 11600 class 25lm type f))), obligation( expression( function( comply with), atom( variable( sealant)), data( tts 00230c class a low modulus type 2))))))""]","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( for), atom( variable( flashing)), data( cladding)), obligation( expression( function( has), atom( variable( flashing)), data( end lap))))), then( and( obligation( expression( function( has), atom( relation( joint), variable( flashing)), data( bead))), obligation( expression( function( is), atom( relation( type), variable( bead)), data( sealant))), obligation( expression( function( equal), atom( relation( diameter), variable( bead)), data( baseunit( kind( metre), prefix( milli)), value( 8.0)))), obligation( expression( function( is), atom( relation( type), variable( sealant)), data( neutral cure))), or( obligation( expression( function( comply with), atom( variable( sealant)), data( iso 11600 class 20lm type f))), obligation( expression( function( comply with), atom( variable( sealant)), data( iso 11600 class 25lm type f))), obligation( expression( function( comply with), atom( variable( sealant)), data( tts 00230c class a low modulus type 2))))))","if( expression( function( is), atom( relation( type), variable( water supply tap)), data( true))), then( obligation( expression( function( comply with), atom( relation( water supply), variable( water supply tap)), data( nzbc g12))))","if( expression( function( is), atom( relation( type), variable( water supply tap)), data( true))), then( obligation( expression( function( comply with), atom( relation( water supply), variable( water supply tap)), data( nzbc g12))))","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( is), atom( relation( system), variable( flashing)), data( endlap)), expression( function( is), atom( relation( requirement), variable( endlap)), data( flashing)))), then( and( obligation( expression( function( as per), atom( relation( form), variable( endlap)), data( figure))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f6))), obligation( expression( function( is), atom( relation( application), variable( bead)), data( neutral cure sealant))), obligation( expression( function( comply with), atom( variable( bead)), data( iso 11600 type f)), obligation( expression( function( equal), atom( relation( class), variable( bead)), data( 20LM))), obligation( expression( function( equal), atom( relation( class), variable( bead)), data( 25LM))), obligation( expression( function( comply with), atom( variable( bead)), data( iso 11600 type f))), obligation( expression( function( comply with), atom( variable( bead)), data( low modulus type ii class a))), obligation( expression( function( comply with), atom( variable( bead)), data( tts 00230c)))))","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( roof)), expression( function( is), atom( relation( system), variable( cladding)), data( profiled metal)), expression( function( is), atom( relation( system), variable( flashing)), data( endlap)), expression( function( is), atom( relation( requirement), variable( endlap)), data( flashing)))), then( and( obligation( expression( function( as per), atom( relation( form), variable( endlap)), data( figure))), obligation( expression( function( equal), atom( relation( key), variable( figure)), data( f6))), obligation( expression( function( is), atom( relation( application), variable( bead)), data( neutral cure sealant))), obligation( expression( function( comply with), atom( variable( bead)), data( iso 11600 type f)), obligation( expression( function( equal), atom( relation( class), variable( bead)), data( 20LM))), obligation( expression( function( equal), atom( relation( class), variable( bead)), data( 25LM))), obligation( expression( function( comply with), atom( variable( bead)), data( iso 11600 type f))), obligation( expression( function( comply with), atom( variable( bead)), data( low modulus type ii class a))), obligation( expression( function( comply with), atom( variable( bead)), data( tts 00230c)))))",0.6866140567765496,0.9247677192186996,1,19,19,1,1,0.9274607985241796,1.0629567549446866,61.62548029651066,57.777688465945666,58.006643838484386,57.94781611358432,"[0.8516729416779143,0.7836737608913013,0.7104904143031522,0.6408460872076235]","[0.7624574239939448,0.6971924710057672,0.6257004584819155,0.5608804146138588]",,15178,14915,14077,15854
t5-amr_ir-rev_1_base_no_gen_not_removed_random_split_esp20_e20_42,60.97034377023004,62.14198076633264,0.7158333785934985,finished,stefanfuchs164,2024-03-14T21:04:08.000Z,7965,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,1,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_1_base_no_gen_not_removed_random_split_esp20_e20_42,1,42,0,random_split,0,0,0.1,FALSE,"translate English to LegalRuleML: G12AS1 Piped water supply system; Pipes penetrating concrete or masonry elements shall be either wrapped with a flexible material, or passed through a sleeve or duct, to permit free movement for expansion and contraction.",translate English to LegalRuleML: E2AS1 The bottom of the EIFS cladding shall be as shown in Figure 125.,"if( and( expression( function( has), atom( variable( piped water supply system)), data( pipe)), expression( function( into), atom( variable( pipe)), data( element)), or( expression( function( is), atom( relation( material), variable( element)), data( concrete)), expression( function( is), atom( relation( material), variable( element)), data( masonry))))), then( or( and( obligation( expression( function( has), atom( variable( pipe)), data( wrapping))), expression( function( is), atom( relation( material), variable( wrapping)), data( flexible))), and( obligation( expression( function( in between), atom( variable( sleeve)), data( element))), obligation( expression( function( in between), atom( variable( sleeve)), data( pipe)))), and( obligation( expression( function( in between), atom( variable( duct)), data( element))), obligation( expression( function( in between), atom( variable( duct)), data( pipe))))))","[""if( and( expression( function( has), atom( variable( piped water supply system)), data( pipe)), expression( function( into), atom( variable( pipe)), data( element)), or( expression( function( is), atom( relation( material), variable( element)), data( concrete)), expression( function( is), atom( relation( material), variable( element)), data( masonry))))), then( or( and( obligation( expression( function( has), atom( variable( pipe)), data( wrapping))), expression( function( is), atom( relation( material), variable( wrapping)), data( flexible))), and( obligation( expression( function( in between), atom( variable( sleeve)), data( element))), obligation( expression( function( in between), atom( variable( sleeve)), data( pipe)))), and( obligation( expression( function( in between), atom( variable( duct)), data( element))), obligation( expression( function( in between), atom( variable( duct)), data( pipe))))))""]","[""if( expression( function( is), atom( relation( type), variable( cladding)), data( eifs))), then( and( obligation( expression( function( comply with), expression( function( bottom of), atom( variable( cladding))), data( figure))), expression( function( equal), atom( relation( key), variable( figure)), data( f125))))""]","if( expression( function( is), atom( relation( type), variable( cladding)), data( eifs))), then( and( obligation( expression( function( comply with), expression( function( bottom of), atom( variable( cladding))), data( figure))), expression( function( equal), atom( relation( key), variable( figure)), data( f125))))","if( or( expression( function( is), atom( relation( type), variable( piped water supply system)), data( penetration)), expression( function( is), atom( relation( type), variable( penetration)), data( concrete element)), expression( function( is), atom( relation( type), variable( penetration)), data( masonry element)))), then( or( obligation( expression( function( has), atom( variable( penetration)), data( pipe))), obligation( expression( function( has), atom( variable( penetration)), data( flexible material))), obligation( expression( function( has), atom( variable( penetration)), data( passed through), atom( variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( sleeve)), data( contraction))))))","if( or( expression( function( is), atom( relation( type), variable( piped water supply system)), data( penetration)), expression( function( is), atom( relation( type), variable( penetration)), data( concrete element)), expression( function( is), atom( relation( type), variable( penetration)), data( masonry element)))), then( or( obligation( expression( function( has), atom( variable( penetration)), data( pipe))), obligation( expression( function( has), atom( variable( penetration)), data( flexible material))), obligation( expression( function( has), atom( variable( penetration)), data( passed through), atom( variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( passing through), variable( sleeve)), data( contraction))))))","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( eifs)), expression( function( has), atom( variable( cladding)), data( bottom)))), then( obligation( expression( function( comply with), atom( relation( bottom), variable( cladding)), data( figure))))","if( and( expression( function( is), atom( relation( application), variable( cladding)), data( eifs)), expression( function( has), atom( variable( cladding)), data( bottom)))), then( obligation( expression( function( comply with), atom( relation( bottom), variable( cladding)), data( figure))))",0.6755274917027205,0.917803912,0.9778336806210676,17,19,1,1,0.9210040848596652,0.9780757626550453,63.09533068454735,63.24271002462748,58.98382810389998,61.078912065619726,"[0.8402603905858789,0.7743814729574223,0.7052570684792827,0.6395230478406282]","[0.8291061146147518,0.7694480810308,0.7031444798448538,0.6402562138828936]",,15178,14915,13979,14588
t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_45,66.38000075586574,57.952025653261344,0.6259775715297338,finished,stefanfuchs164,2023-11-23T11:54:13.000Z,3161,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,0,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_45,1,45,0,doc_split,0,0,0.1,FALSE,translate English to LegalRuleML: B1AS3 1.9.3 The number of bracing units to be provided for each chimney connection (see Paragraph 1.9.4) is given in Table 2.,"translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))","[""if( expression( function( exist), atom( variable( chimney)))), then( obligation( expression( rulestatement( expression( function( for each), atom( relation( connection), variable( chimney)))), appliedstatement( expression( function( as per), expression( function( count), atom( relation( unit), variable( bracing))), data( nzbc b1as3 t2))))))""]","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))","if( expression( function( exist), atom( variable( chimney connection)))), then( obligation( expression( function( has), atom( variable( chimney connection)), data( bracing unit))))","if( expression( function( exist), atom( variable( chimney connection)))), then( obligation( expression( function( has), atom( variable( chimney connection)), data( bracing unit))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste disposal system)), data( plumbing disposal system)), expression( function( has), atom( variable( waste disposal system)), data( drainage disposal system)), expression( function( comply with), atom( variable( waste disposal system)), data( nzbc g13 foul water)))))","if( and( expression( function( for), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( towards), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( waste disposal system)), data( plumbing disposal system)), expression( function( has), atom( variable( waste disposal system)), data( drainage disposal system)), expression( function( comply with), atom( variable( waste disposal system)), data( nzbc g13 foul water)))))",0.7602665002045814,0.9893249158846312,1,19,19,1,1,0.989381491,1.0845739219712525,65.74406547,56.81934516663583,67.02835887719179,59.13078414,"[0.8621229925577751,0.8051047739089333,0.739523092767171,0.6794136392606756]","[0.7522186723464679,0.6786565030967128,0.5888982136434481,0.5107410089307265]",,12902,7792,12765,8451
t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_44,64.98015428636407,53.63465758966949,0.5780830007532984,finished,stefanfuchs164,2023-11-23T10:53:04.000Z,3660,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,0,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_44,1,44,0,doc_split,0,0,0.1,FALSE,"translate English to LegalRuleML: G13AS2 4.1.2 Every main drain, and every branch drain longer than 10 m, shall be ventilated in accordance with Table 3.","translate English to LegalRuleML: G14VM1 1.4.2 Storage tanks may be placed below ground provided: a) Precautions are taken to avoid: i) health or safety hazards, ii) corrosion that threatens the integrity of the tank or associated plant, and b) Tanks are designed to withstand the effects of associated loads.","if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))","[""if( or( expression( function( is), atom( relation( type), variable( drain)), data( main)), and( expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( greater than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 10.0)))))), then( obligation( and( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3)))))""]","[""if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))""]","if( expression( function( below), atom( relation( location), variable( storage tank)), data( ground level))), then( obligation( and( not( expression( function( cause), atom( variable( storage tank)), data( health hazard))), not( expression( function( cause), atom( variable( storage tank)), data( safety hazard))), expression( function( has), atom( variable( storage tank)), data( corrosion resistance)), expression( function( greater than), atom( relation( design load), variable( storage tank)), data( true load)))))","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( less than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 100.0))))), then( obligation( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3))))","if( and( expression( function( is), atom( relation( type), variable( drain)), data( main)), expression( function( is), atom( relation( type), variable( drain)), data( branch)), expression( function( less than equal), atom( relation( length), variable( drain)), data( baseunit( kind( metre)), value( 100.0))))), then( obligation( expression( function( has), atom( variable( drain)), data( ventilation)), expression( function( as per), atom( variable( ventilation)), data( nzbc g13as2 t3))))","if( and( expression( function( is), atom( relation( type), variable( storage tank)), data( x0)), expression( function( is), atom( relation( type), variable( x0)), data( x1)), expression( function( is), atom( relation( type), variable( x0)), data( x1)), expression( function( is), atom( relation( type), variable( x0)), data( health hazards)), expression( function( is), atom( relation( type), variable( x1)), data( safety hazards))), expression( function( is), atom( relation( type), variable( x1)), data( corrosion)), or( expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( is), atom( relation( design), variable( tank)), data( withstand), atom( relation( design), variable( tank)), data( load)))))), then( permission( expression( function( below), atom( variable( storage tank)), data( ground))))","if( and( expression( function( is), atom( relation( type), variable( storage tank)), data( x0)), expression( function( is), atom( relation( type), variable( x0)), data( x1)), expression( function( is), atom( relation( type), variable( x0)), data( x1)), expression( function( is), atom( relation( type), variable( x0)), data( health hazards)), expression( function( is), atom( relation( type), variable( x1)), data( safety hazards))), expression( function( is), atom( relation( type), variable( x1)), data( corrosion)), or( expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( threaten), atom( variable( corrosion)), data( integrity)), expression( function( is), atom( relation( design), variable( tank)), data( withstand), atom( relation( design), variable( tank)), data( load)))))), then( permission( expression( function( below), atom( variable( storage tank)), data( ground))))",0.7492763455222797,1,1,17,19,1,1,1.0020926988063863,1.167222792607803,63.87362422435371,50.36751684557911,66.12569870118055,57.35505198161592,"[0.8482481243715678,0.7870586405350755,0.7195589270352702,0.65610254797106]","[0.6981858163826278,0.6272123893805309,0.5431274346132443,0.4695408734602464]",,12902,7792,12929,9095
t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_43,65.85949721053623,53.171691281836054,0.6000181856043418,finished,stefanfuchs164,2023-11-23T10:00:11.000Z,3164,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,0,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_0_base_no_gen_doc_split_esp20_e20_43,1,43,0,doc_split,0,0,0.1,FALSE,"translate English to LegalRuleML: E2AS1 10.3 Measuring moisture content 10.3.1 Timber; Measurement shall be by the recommended procedure in the Scion (New Zealand Forest Research Institute) publication 'Measurement of moisture content of Wood' using electrical resistance type moisture meters with insulated probes. Representative samplings of measurements shall be taken: a) With meters calibrated to AS/NZS 1080.1 Appendix E b) By inserting probes to at least 1/3 the depth of timber being measured, at a distance exceeding 200 mm from board ends c) Using correction factors for timber species, temperature, and treatment type (outlined in Scion publication above).",translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable.,"if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))","[""if( and( expression( function( by), atom( relation( moisture content), variable( timber)), data( measurement)))), then( obligation( and( expression( function( is), atom( relation( recommended procedure), variable( measurement)), data( measurement of moisture content of wood)), expression( function( as per), atom( relation( recommended procedure), variable( measurement)), data( scion publication)), expression( function( by), atom( variable( measurement)), data( moisture meter)), expression( function( is), atom( relation( type), variable( moisture meter)), data( electrical resistance)), expression( function( has), atom( variable( moisture meter)), data( insulated probe)), expression( function( as per), atom( relation( calibration), variable( moisture meter)), data( nzs 1080 1 appendix e)), expression( function( by), atom( relation( sampling), variable( measurement)), data( probe)), expression( function( into), atom( variable( probe)), data( timber)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( greater than equal), atom( relation( depth), variable( probe)), data( '1/3 * x0')), expression( function( has), atom( variable( timber)), data( board)), expression( function( define), atom( relation( end), variable( board)), data( x1)), expression( function( greater than), atom( relation( location), variable( probe)), data( 'x1 + 200 mm')), expression( function( include), atom( relation( correction factor), variable( measurement)), data( timber species)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( temperature)), expression( function( include), atom( relation( correction factor), variable( measurement)), data( treatment type)), expression( function( as per), atom( relation( correction factor), variable( measurement)), data( scion publication)))))""]","[""if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))""]","if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))","if( expression( function( is), atom( relation( material), variable( timber)), data( moisture content))), then( obligation( and( expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication)), expression( function( is), atom( relation( type), variable( timber)), data( scion)), expression( function( is), atom( relation( type), variable( timber)), data( electrical resistance)), expression( function( is), atom( relation( type), variable( timber moisture meters)), data( insulation probe)), expression( function( comply with), atom( relation( sampling), variable( moisture meters)), data( nzs 1080.1 appendix e)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( define), atom( relation( depth), variable( timber)), data( x1)), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( '1/3')), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( 'x0 1/3')), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), expression( function( has), atom( variable( timber)), data( correction factor)), expression( function( has), atom( variable( correction factor)), data( species), variable( timber)), expression( function( has), atom( variable( timber)), data( temperature)), expression( function( has), atom( variable( timber)), data( treatment type)), expression( function( as per), atom( variable( correction factor)), data( publication)), expression( function( as per), atom( variable( publication)), data( nzs 1080.1 appendix e))))","if( expression( function( is), atom( relation( material), variable( timber)), data( moisture content))), then( obligation( and( expression( function( as per), atom( relation( measurement), variable( moisture content)), data( publication)), expression( function( is), atom( relation( type), variable( timber)), data( scion)), expression( function( is), atom( relation( type), variable( timber)), data( electrical resistance)), expression( function( is), atom( relation( type), variable( timber moisture meters)), data( insulation probe)), expression( function( comply with), atom( relation( sampling), variable( moisture meters)), data( nzs 1080.1 appendix e)), expression( function( define), atom( relation( depth), variable( timber)), data( x0)), expression( function( define), atom( relation( depth), variable( timber)), data( x1)), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( '1/3')), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( 'x0 1/3')), expression( function( greater than equal), atom( relation( depth), variable( timber)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))), expression( function( has), atom( variable( timber)), data( correction factor)), expression( function( has), atom( variable( correction factor)), data( species), variable( timber)), expression( function( has), atom( variable( timber)), data( temperature)), expression( function( has), atom( variable( timber)), data( treatment type)), expression( function( as per), atom( variable( correction factor)), data( publication)), expression( function( as per), atom( variable( publication)), data( nzs 1080.1 appendix e))))","if( expression( function( exist), atom( variable( tank)))), then( obligation( and( expression( function( against), atom( variable( tank)), data( earthquake force)), expression( function( comply with), atom( variable( tank)), data( nzs 4219)))))","if( expression( function( exist), atom( variable( tank)))), then( obligation( and( expression( function( against), atom( variable( tank)), data( earthquake force)), expression( function( comply with), atom( variable( tank)), data( nzs 4219)))))",0.7604424197749835,1,1,18,19,1,1,1.0084483025887458,1.1036960985626283,65.42169831972954,50.781772378427966,66.30319503540123,55.79767109032255,"[0.8501268157712705,0.7951313755795981,0.7326909627787707,0.6751836224410064]","[0.7267441860465116,0.6506729081334114,0.5625441696113074,0.4872554831061055]",,12902,7792,13011,8600
t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_45,66.52860496395175,61.82837846140497,0.6507840450140719,finished,stefanfuchs164,2023-11-23T09:12:16.000Z,2866,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,0,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_45,1,45,0,random_split,0,0,0.1,FALSE,"translate English to LegalRuleML: G14VM1 2.0.1 Where the network utility operator accepts the discharge of industrial liquid waste to a sewer, the waste shall be conveyed in a plumbing and drainage disposal system complying with NZBC G13 Foul Water.","translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material • For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports.","if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))","[""if( and( expression( function( accept), atom( variable( network utility operator)), data( discharge)), expression( function( is), atom( relation( type), variable( discharge)), data( industrial liquid waste)), expression( function( into), atom( variable( discharge)), data( sewer)))), then( obligation( and( expression( function( within), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( for), atom( variable( disposal system)), data( plumbing)), expression( function( for), atom( variable( disposal system)), data( drainage)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))""]","[""if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))""]","if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))","if( and( expression( function( has), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( into), atom( variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))","if( and( expression( function( has), atom( variable( network utility operator)), data( industrial liquid waste)), expression( function( into), atom( variable( industrial liquid waste)), data( sewer)))), then( obligation( and( expression( function( has), atom( variable( industrial liquid waste)), data( disposal system)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)), expression( function( comply with), atom( variable( disposal system)), data( nzbc g13)))))","if( and( expression( function( is), atom( relation( type), variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( prefix( milli), kind( metre)), value( 1.2)))))), then( obligation( and( expression( function( has), atom( variable( underlay)), data( fully support)), expression( function( has), atom( variable( underlay)), data( corrosion resistant material))))","if( and( expression( function( is), atom( relation( type), variable( roof)), data( underlay)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( relation( type), variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( prefix( milli), kind( metre)), value( 1.2)))))), then( obligation( and( expression( function( has), atom( variable( underlay)), data( fully support)), expression( function( has), atom( variable( underlay)), data( corrosion resistant material))))",0.7104032800445454,0.9792723897620328,1,16,19,1,1,0.979484269,1.0899064972428674,67.71384531172286,63.53615458686522,65.38414294200422,60.21000527,"[0.8224190744266909,0.7634077281812125,0.6962385859093575,0.6335749199393225]","[0.7478369262355185,0.6896145057860986,0.6217397747480735,0.5594040968342644]",,12332,12513,12079,13638
t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_44,67.35264984019453,64.08473676897248,0.722743617,finished,stefanfuchs164,2023-11-23T08:26:11.000Z,2757,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,0,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_44,1,44,0,random_split,0,0,0.1,FALSE,translate English to LegalRuleML: E2AS1 Cladding systems shall meet the requirements of NZBC E2.2 to E2.3.7.,translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671.,"if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))","[""if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))""]","[""if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))""]","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))","if( expression( function( exist), atom( variable( cladding system)))), then( obligation( expression( function( comply with), atom( variable( cladding system)), data( nzbc e2 2 to nzbc e2 3.7))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))","if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))",0.7107098148254655,1,0.9672693480858616,18,19,1,1,1.016785598443075,0.967793495,67.18539109723297,65.27159463155013,67.52074344638234,62.94027025115526,"[0.8030943456415982,0.7458293230670516,0.6827458256029685,0.6238844718481259]","[0.8461601981833196,0.7875238807209901,0.7173295454545454,0.6520971673531142]",,12332,12513,12539,12110
t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_43,68.84408656334861,63.99476586810897,0.7125814642236702,finished,stefanfuchs164,2023-11-23T07:40:11.000Z,2752,FALSE,8,lrml,FALSE,20,20,500,epoch,FALSE,test,0,FALSE,1,FALSE,0,0.0001,linear,1024,lrml_f_score,t5-amr,"[""../LrmlNotebooks/models/model_t5-amr/""]",3,0,__main__.post_process,,TRUE,t5-amr_ir-rev_0_base_no_gen_random_split_esp20_e20_43,1,43,0,random_split,0,0,0.1,FALSE,"translate English to LegalRuleML: B1AS3 1.9.1 The bracing described in Paragraphs 1.9.2 to 1.9.6 shall be provided in those buildings where one or more of the following apply: a) The area of the room containing the chimney exceeds 24 m2, c) The floor area on any level of the building, for a given chimney type (see Table 2), is less than: i) 50 m2 for chimney Type 1, ii) 75 m2 for chimney Types 2, 3 and 4, iii) 150 m2 for chimney Types 5, 6 and 7.",translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard.,"if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))","[""if( or( and( expression( function( include), atom( relation( space), variable( building)), data( chimney)), expression( function( greater than), atom( relation( area), variable( space)), data( baseunit( exponent( 2.0), kind( metre)), value( 24.0)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 50.0))), expression( function( is), atom( relation( type), variable( chimney)), data( type 1))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 75.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 2)), expression( function( is), atom( relation( type), variable( chimney)), data( type 3)), expression( function( is), atom( relation( type), variable( chimney)), data( type 4)))), and( expression( function( less than), atom( relation( floor area), variable( building storey)), data( baseunit( exponent( 2.0), kind( metre)), value( 150.0))), or( expression( function( is), atom( relation( type), variable( chimney)), data( type 5)), expression( function( is), atom( relation( type), variable( chimney)), data( type 6)), expression( function( is), atom( relation( type), variable( chimney)), data( type 7)))))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)))))""]","[""if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))""]","if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( expression( function( exist), atom( variable( building)))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)), expression( function( greater than), atom( relation( area), variable( room)), data( chimney)), expression( function( greater than), atom( relation( area), variable( room)), data( baseunit( kind( metre)), value( 240.0))), expression( function( greater than), atom( relation( area), variable( floor)), data( baseunit( kind( metre)), value( 50.0))), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( greater than equal), atom( relation( floor area), variable( floor)), data( baseunit( kind( metre)), value( 50.0))), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom(","if( expression( function( exist), atom( variable( building)))), then( obligation( and( expression( function( has), atom( variable( building)), data( bracing)), expression( function( as per), atom( variable( bracing)), data( nzbc b1as3 1.9.2 to nzbc b1as3 1.9.6)), expression( function( greater than), atom( relation( area), variable( room)), data( chimney)), expression( function( greater than), atom( relation( area), variable( room)), data( baseunit( kind( metre)), value( 240.0))), expression( function( greater than), atom( relation( area), variable( floor)), data( baseunit( kind( metre)), value( 50.0))), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( greater than equal), atom( relation( floor area), variable( floor)), data( baseunit( kind( metre)), value( 50.0))), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom( variable( floor)), data( chimney type 1)), expression( function( for), atom(","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))","if( expression( function( is), atom( relation( type), variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( test), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verify), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))",0.714153935,0.966194419,0.9500434252502432,17,19,1,1,0.9667531625040544,0.9512506992727564,70.61642363286118,65.36681704327803,67.15853585839014,62.67912932739614,"[0.8339204831404127,0.7767277023036031,0.7098471986417657,0.6491587667606115]","[0.8497017558598673,0.7909060175794456,0.7197517217923646,0.6543199315654405]",,12332,12513,11922,11903