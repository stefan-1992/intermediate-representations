{"_type": "table", "column_types": {"params": {"type_map": {"IR label": {"params": {"allowed_types": [{"wb_type": "none"}, {"wb_type": "string"}]}, "wb_type": "union"}, "IR pred": {"params": {"allowed_types": [{"wb_type": "none"}, {"wb_type": "string"}]}, "wb_type": "union"}, "input": {"params": {"allowed_types": [{"wb_type": "none"}, {"wb_type": "string"}]}, "wb_type": "union"}, "original label": {"params": {"allowed_types": [{"wb_type": "none"}, {"params": {"element_type": {"wb_type": "string"}, "length": 1}, "wb_type": "list"}]}, "wb_type": "union"}, "original pred": {"params": {"allowed_types": [{"wb_type": "none"}, {"wb_type": "string"}]}, "wb_type": "union"}}}, "wb_type": "typedDict"}, "columns": ["input", "original label", "original pred", "IR label", "IR pred"], "data": [["translate English to LegalRuleML: CAS2 2.3 Fire resistance ratings 2.3.6 Floors shall have an FRR for exposure from the underside. floor, exposure, underside, fire resistance rating", ["if( expression( function( exist), atom( variable( floor)))), then( obligation( expression( function( has), atom( relation( underside), variable( floor)), data( fire resistance rating))))"], "if( and( expression( function( has), atom( variable( floor)), data( exposure)), expression( function( is), atom( relation( location), variable( exposure)), data( underside)))), then( obligation( and( expression( function( has), atom( variable( floor)), data( fire resistance rating)))))", "if( exist( floor)), then( obligation( has( floor. underside, fire resistance rating)))", "if( and( has( floor, exposure), is( exposure. location, underside))), then( obligation( and( has( floor, fire resistance rating), has( floor, fire resistance rating))))"], ["translate English to LegalRuleML: G12AS1 1.0.1 This acceptable solution applies to below ground and above ground piped water supply systems. piped water supply system, below ground, above ground", ["if( or( expression( function( is), atom( relation( type), variable( piped water supply system)), data( below ground)), expression( function( is), atom( relation( type), variable( piped water supply system)), data( above ground)))), then( expression( function( apply to), atom( variable( nzbc g12as1)), data( piped water supply system)))"], "if( or( expression( function( is), atom( variable( piped water supply system)), data( below ground)), expression( function( is), atom( variable( piped water supply system)), data( above ground)))), then( permission( expression( function( comply with), atom( variable( piped water supply system)), data( nzbc g12as1))))", "if( is( piped water supply system. type, or( below ground, above ground))), then( apply to( nzbc g12as1, piped water supply system))", "if( is( piped water supply system, or( below ground, above ground))), then( permission( comply with( piped water supply system, nzbc g12as1)))"], ["translate English to LegalRuleML: G12AS1 Piped water supply system; Covers shall be provided to: All tanks located in roof spaces to prevent condensation damaging building elements. piped water supply system, tank, location, roof space, cover", ["if( and( expression( function( has), atom( variable( piped water supply system)), data( water tank)), expression( function( within), atom( relation( location), variable( water tank)), data( roof space)))), then( obligation( expression( function( has), atom( variable( water tank)), data( cover))))"], "if( expression( function( has), atom( variable( piped water supply system)), data( tank))), then( obligation( and( expression( function( within), atom( relation( location), variable( tank)), data( roof space)), expression( function( has), atom( variable( tank)), data( cover)))))", "if( and( has( piped water supply system, water tank), within( water tank. location, roof space))), then( obligation( has( water tank, cover)))", "if( has( piped water supply system, tank)), then( obligation( and( within( tank. location, roof space), has( tank, cover))))"], ["translate English to LegalRuleML: G12AS1 5.4.3 Provision shall be made for draining storage water heaters in accordance with Figure 7. storage water heater, drain, nzbc g12as1 f7", ["if( expression( function( exist), atom( variable( storage water heater)))), then( obligation( expression( function( as per), atom( relation( drain), variable( storage water heater)), data( nzbc g12as1 f7))))"], "if( expression( function( exist), atom( variable( storage water heater)))), then( obligation( expression( function( as per), atom( relation( drain), variable( storage water heater)), data( nzbc g12as1 f7))))", "if( exist( storage water heater)), then( obligation( as per( storage water heater. drain, nzbc g12as1 f7)))", "if( exist( storage water heater)), then( obligation( as per( storage water heater. drain, nzbc g12as1 f7)))"], ["translate English to LegalRuleML: G12AS1 3.6.2 Manufacture; Backflow prevention devices shall be manufactured as follows: Double check valve devices to AS/NZS 2845.1 Section 10 (see Figure 2 (b)). backflow prevention device, double check valve, nzs 2845 1 10", ["if( expression( function( is), atom( variable( backflow prevention device)), data( double check valve device))), then( obligation( expression( function( comply with), atom( variable( backflow prevention device)), data( nzs 2845 1 10))))"], "if( expression( function( is), atom( variable( backflow prevention device)), data( double check valve))), then( obligation( expression( function( comply with), atom( variable( backflow prevention device)), data( nzs 2845 1 10))))", "if( is( backflow prevention device, double check valve device)), then( obligation( comply with( backflow prevention device, nzs 2845 1 10)))", "if( is( backflow prevention device, double check valve)), then( obligation( comply with( backflow prevention device, nzs 2845 1 10)))"], ["translate English to LegalRuleML: G12AS1 Piped Water Supply System 3.7.2 Pressure vacuum breakers shall be tested and verified as meeting the test requirements of AS 2845.3 or NZ backflow testing standard. piped water supply system, pressure vacuum breaker, testing, as 2845 3, nz backflow testing standard, verifying", ["if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( nz backflow testing standard))))))"], "if( expression( function( has), atom( variable( piped water supply system)), data( pressure vacuum breaker))), then( obligation( and( or( expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( testing), variable( pressure vacuum breaker)), data( nz backflow testing standard))), or( expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( as 2845 3)), expression( function( as per), atom( relation( verifying), variable( pressure vacuum breaker)), data( 'nz backflow testing standard'))))))", "if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, nz backflow testing standard)))))", "if( has( piped water supply system, pressure vacuum breaker)), then( obligation( and( as per( pressure vacuum breaker. testing, or( as 2845 3, nz backflow testing standard)), as per( pressure vacuum breaker. verifying, or( as 2845 3, 'nz backflow testing standard')))))"], ["translate English to LegalRuleML: CAS2 2.3 Fire resistance ratings 2.3.3 If there is more than one risk group on one floor in the building, the highest required FRR shall be applied to common spaces and shared escape routes for that floor level. building, risk group, 1, fire resistance rating, common space, shared escape route", ["if( and( expression( function( greater than), expression( function( count), atom( relation( risk group), variable( building storey))), data( 1)), expression( function( has), atom( variable( building storey)), data( space)), or( expression( function( is), atom( relation( type), variable( space)), data( common))), and( expression( function( is), atom( relation( type), variable( space)), data( escape route))), expression( function( is), atom( variable( escape route)), data( shared)))), then( obligation( and( expression( function( define), expression( function( max), atom( relation( fire resistance rating), variable( risk groups))), data( x0)), expression( function( equal), atom( relation( fire resistance rating), variable( space)), data( x0)))))"], "if( expression( function( greater than), expression( function( count), atom( relation( risk group), variable( building))), data( 1))), then( obligation( and( expression( function( define), atom( relation( fire resistance rating), variable( common space)), data( x0)), expression( function( has), atom( variable( common space)), data( shared escape route)))))", "if( and( greater than( count( building storey. risk group), 1), has( building storey, space), or( is( space. type, common)), and( is( space. type, escape route)), is( escape route, shared))), then( obligation( and( define( max( risk groups. fire resistance rating), x0), equal( space. fire resistance rating, x0))))", "if( greater than( count( building. risk group), 1)), then( obligation( and( define( common space. fire resistance rating, x0), has( common space, shared escape route))))"], ["translate English to LegalRuleML: CAS2 2.3 Fire resistance ratings 2.3.4 FRRs shall apply to the sides of primary elements and secondary elements which are exposed to fire. element, type, primary, secondary, side, fire resistance rating", ["if( and( or( expression( function( is), atom( relation( type), variable( element)), data( primary)), expression( function( is), atom( relation( type), variable( element)), data( secondary))), expression( function( has), atom( variable( element)), data( fire resistance rating)), expression( function( has), atom( variable( element)), data( side)), expression( function( exposed to), atom( relation( side), variable( element)), data( fire)))), then( obligation( expression( function( apply to), atom( variable( fire resistance rating)), data( side))))"], "if( and( or( expression( function( is), atom( relation( type), variable( element)), data( primary)), expression( function( is), atom( relation( type), variable( element)), data( secondary))))), then( obligation( and( expression( function( has), atom( relation( side), variable( element)), data( fire resistance rating)), expression( function( has), atom( relation( side), variable( element)), data( fire resistant rating)))))", "if( and( is( element. type, or( primary, secondary)), has( element, fire resistance rating), has( element, side), exposed to( element. side, fire))), then( obligation( apply to( fire resistance rating, side)))", "if( and( is( element. type, or( primary, secondary)))), then( obligation( and( has( element. side, fire resistance rating), has( element. side, fire resistant rating))))"], ["translate English to LegalRuleML: E1AS1 3.7.7 Access to a drain laid under a building shall be provided immediately outside the building. These points of access shall be located within 2.0 m of an exterior wall. drain, access point, location, exterior wall, distance, 2 m", ["if( expression( function( below), atom( variable( drain)), data( building))), then( obligation( and( expression( function( has), atom( variable( drain)), data( access point)), expression( function( outside), atom( relation( location), variable( access point)), data( building)), expression( function( has), atom( variable( building)), data( external wall)), expression( function( define), atom( relation( location), variable( external wall)), data( x0)), expression( function( within), atom( relation( location), variable( access point)), data( 'x0 + 2 m')))))"], "if( expression( function( below), atom( relation( access point), variable( drain)), data( building))), then( obligation( and( expression( function( within), atom( relation( location), variable( access point)), data( exterior wall)), expression( function( less than equal), atom( relation( distance), variable( access point)), data( baseunit( kind( metre)), value( 2.0))))))", "if( below( drain, building)), then( obligation( and( has( drain, access point), outside( access point. location, building), has( building, external wall), define( external wall. location, x0), within( access point. location, 'x0 + 2 m'))))", "if( below( drain. access point, building)), then( obligation( and( within( access point. location, exterior wall), less than equal( access point. distance, 2 m))))"], ["translate English to LegalRuleML: E1AS1 3.0 Drainage System Materials and Construction; The bubble-up chamber system shown in Figures 6 and 7 may be used provided that: The total chamber depth does not exceed 1.0 m. drain, bubbleup chamber, depth, 1 m, construction, nzbc e1as1 f6", ["if( expression( function( has), atom( variable( drain)), data( bubbleup chamber))), then( obligation( expression( function( less than equal), atom( relation( depth), variable( bubbleup chamber)), data( baseunit( kind( metre)), value( 1.0)))))"], "if( expression( function( has), atom( variable( drain)), data( bubbleup chamber))), then( obligation( and( expression( function( define), atom( relation( depth), variable( drain)), data( x0)), expression( function( less than equal), atom( relation( depth), variable( bubbleup chamber)), data( baseunit( kind( metre)), value( 1.0))), expression( function( as per), atom( relation( construction), variable( bubbleup chamber)), data( nzbc e1as1 f6.3)))))", "if( has( drain, bubbleup chamber)), then( obligation( less than equal( bubbleup chamber. depth, 1 m)))", "if( has( drain, bubbleup chamber)), then( obligation( and( define( drain. depth, x0), less than equal( bubbleup chamber. depth, 1 m), as per( bubbleup chamber. construction, and( nzbc e1as1 f6.3)))))"], ["translate English to LegalRuleML: G12AS1 6.6.2 Pressure relief valves and expansion control valves shall have: a) A flow rate capacity of no less than the rate of cold water supply, and b) A maximum pressure rating of no more than the working pressure of the hot water storage vessel. pressure relief valve, expansion control valve, flow rate capacity, cold water supply, maximum pressure rating, working pressure, hot water storage vessel", ["if( or( expression( function( is), atom( relation( type), variable( valve)), data( pressure relief)), expression( function( is), atom( relation( type), variable( valve)), data( expansion control)))), then( obligation( and( expression( function( define), atom( relation( flow rate), variable( cold water supply)), data( x0)), expression( function( greater than equal), atom( relation( flow rate capacity), variable( valve)), data( x0)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x0)), expression( function( less than equal), atom( relation( maximum pressure rating), variable( valve)), data( x0)))))"], "if( expression( function( is), atom( variable( pressure relief valve)), data( expansion control valve))), then( obligation( and( expression( function( define), atom( relation( flow rate capacity), variable( pressure relief valve)), data( x0)), expression( function( define), atom( relation( flow rate capacity), variable( cold water supply)), data( x1)), expression( function( define), atom( relation( maximum pressure rating), variable( expansion control valve)), data( x1)), expression( function( define), atom( relation( working pressure), variable( hot water storage vessel)), data( x1)), expression( function( less than equal), atom( variable( pressure rating)), data( x1)))))", "if( is( valve. type, or( pressure relief, expansion control))), then( obligation( and( define( cold water supply. flow rate, x0), greater than equal( valve. flow rate capacity, x0), define( hot water storage vessel. working pressure, x0), less than equal( valve. maximum pressure rating, x0))))", "if( is( pressure relief valve, expansion control valve)), then( obligation( and( define( pressure relief valve. flow rate capacity, x0), define( cold water supply. flow rate capacity, x1), define( expansion control valve. maximum pressure rating, x1), define( hot water storage vessel. working pressure, x1), less than equal( pressure rating, x1))))"], ["translate English to LegalRuleML: G12AS1 6.6.4 The following valves shall have an energy rating greater than that of the energy sources heating the water: Temperature/pressure relief valve. valve, type, temperature relief valve, pressure relief valve, energy rating, water heating source", ["if( expression( function( has), atom( variable( water heater)), data( temperature pressure relief valve))), then( obligation( and( expression( function( has), atom( variable( water heater)), data( energy source)), expression( function( define), atom( relation( energy rating), variable( energy source)), data( x0)), expression( function( greater than), atom( relation( energy rating), variable( temperature pressure relief valve)), data( x0)))))"], "if( or( expression( function( is), atom( relation( type), variable( valve)), data( temperature relief valve)), expression( function( is), atom( relation( type), variable( valve)), data( pressure relief valve)))), then( obligation( and( expression( function( define), atom( relation( energy rating), variable( water heating source)), data( x0)), expression( function( greater than equal), atom( relation( energy rating), variable( valve)), data( x0)))))", "if( has( water heater, temperature pressure relief valve)), then( obligation( and( has( water heater, energy source), define( energy source. energy rating, x0), greater than( temperature pressure relief valve. energy rating, x0))))", "if( is( valve. type, or( temperature relief valve, pressure relief valve))), then( obligation( and( define( water heating source. energy rating, x0), greater than equal( valve. energy rating, x0))))"], ["translate English to LegalRuleML: B2AS1 1.1.1 Building elements, including materials, components and systems, complying with a publication referenced in the Acceptable Solutions and Verification Methods, satisfy B2 requirements only when the conditions of use stated in the publication and Acceptable Solutions and Verification Methods prevail. building, element, material, component, system, publication, nzbc b2as1", ["if( and( or( expression( function( has), atom( relation( reference), variable( nzbc b2as)), data( publication)), expression( function( has), atom( relation( reference), variable( nzbc b2vm)), data( publication))), or( expression( function( comply with), atom( relation( element), variable( building)), data( publication)), expression( function( comply with), atom( relation( material), variable( building)), data( publication)), expression( function( comply with), atom( relation( component), variable( building)), data( publication)), expression( function( comply with), atom( relation( system), variable( building)), data( publication))), expression( function( is), atom( relation( condition of use), variable( publication)), data( true)), expression( function( is), atom( relation( condition of use), variable( nzbc b2as)), data( true)), expression( function( is), atom( relation( condition of use), variable( nzbc b2vm)), data( true)))), then( and( expression( function( comply with), atom( relation( element), variable( building)), data( nzbc b2)), expression( function( comply with), atom( relation( material), variable( building)), data( nzbc b2)), expression( function( comply with), atom( relation( component), variable( building)), data( nzbc b2)), expression( function( comply with), atom( relation( system), variable( building)), data( nzbc b2))))"], "if( and( or( expression( function( include), atom( relation( element), variable( building)), data( material)), expression( function( include), atom( relation( element), variable( building)), data( component)), expression( function( include), atom( relation( element), variable( building)), data( system))), expression( function( comply with), atom( relation( element), variable( building)), data( publication)), expression( function( as per), atom( variable( publication)), data( Acceptable Solutions and Verification Methods)))), then( obligation( expression( function( comply with), atom( relation( element), variable( building)), data( nzbc b2as1))))", "if( and( or( has( nzbc b2as. reference, publication), has( nzbc b2vm. reference, publication)), or( comply with( building. element, publication), comply with( building. material, publication), comply with( building. component, publication), comply with( building. system, publication)), is( publication. condition of use, true), is( nzbc b2as. condition of use, true), is( nzbc b2vm. condition of use, true))), then( and( comply with( building. element, nzbc b2), comply with( building. material, nzbc b2), comply with( building. component, nzbc b2), comply with( building. system, nzbc b2)))", "if( and( include( building. element, or( material, component, system)), comply with( building. element, publication), as per( publication, and( Acceptable Solutions and Verification Methods)))), then( obligation( comply with( building. element, nzbc b2as1)))"], ["translate English to LegalRuleML: B2AS1 2.1.2 It is the responsibility of the person specifying the building element to determine normal maintenance requirements. These may be based on the manufacturer's recommendations and may also include periodic inspections of elements not readily observable without a specific effort (e.g. access to roof or subfloor spaces). building, element, specification, maintenance, normal, nzbc b2as1", ["if( expression( function( has), atom( relation( element), variable( building)), data( specifier))), then( and( obligation( and( expression( function( has), atom( relation( element), variable( building)), data( maintenance requirements)), expression( function( by), atom( variable( maintenance requirements)), data( specifier)))), permission( and( expression( function( include), atom( variable( maintenance requirements)), data( manufacturers recommendation)), expression( function( include), atom( variable( maintenance requirements)), data( periodic inspection)), expression( function( for), atom( variable( periodic inspection)), data( element)), not( expression( function( is), atom( variable( element)), data( observable)))))))"], "if( expression( function( has), atom( variable( building)), data( element))), then( obligation( and( expression( function( define), atom( relation( specification), variable( element)), data( maintenance)), expression( function( is), atom( relation( type), variable( maintenance)), data( normal)), expression( function( as per), atom( relation( requirement), variable( maintenance)), data( manufacturer recommendation))), or( and( expression( function( include), atom( relation( requirement), variable( maintenance)), data( periodic inspection)), not( expression( function( is), atom( relation( readily observable), variable( element)), data( without( effort, specific))))))))", "if( has( building. element, specifier)), then( and( obligation( and( has( building. element, maintenance requirements), by( maintenance requirements, specifier))), permission( and( include( maintenance requirements, and( manufacturers recommendation, periodic inspection)), for( periodic inspection, element), not( is( element, observable))))))", "if( has( building, element)), then( obligation( and( define( element. specification, maintenance), is( maintenance. type, normal), as per( maintenance. requirement, manufacturer recommendation)), or( and( include( maintenance. requirement, periodic inspection), not( is( element. readily observable, without( effort, specific)))))))"], ["translate English to LegalRuleML: B1AS1 The lowest zone within the Selwyn or Waimakariri District Council boundaries is within Zone 2. Areas within Selwyn District that are designated as Zone 1 in NZS 3604 shall become Zone 2. area, nzs 3604, 'zone 1', nzbc b1as1", ["if( or( and( expression( function( is), atom( variable( zone)), data( lowest)), expression( function( within), atom( variable( zone)), data( boundary)), or( expression( function( for), atom( variable( boundary)), data( selwyn district council)), expression( function( for), atom( variable( boundary)), data( waimakariri district council)))), and( expression( function( within), atom( variable( area)), data( selwyn district council)), expression( function( is), atom( variable( area)), data( zone 1)), expression( function( as per), atom( variable( area)), data( nzs 3604))))), then( and( expression( function( within), atom( variable( zone)), data( zone 2)), expression( function( is), atom( variable( area)), data( zone 2))))"], "if( or( expression( function( within), atom( variable( area)), data( Selwyn District)), expression( function( within), atom( variable( area)), data( 'zone 1')))), then( obligation( expression( function( become), atom( variable( area)), data( 'zone 2'))))", "if( or( and( is( zone, lowest), within( zone, boundary), for( boundary, or( selwyn district council, waimakariri district council))), and( within( area, selwyn district council), is( area, zone 1), as per( area, nzs 3604)))), then( and( within( zone, zone 2), is( area, zone 2)))", "if( within( area, or( Selwyn District, 'zone 1'), as per( area, nzs 3604))), then( obligation( become( area, 'zone 2')))"], ["translate English to LegalRuleML: B2AS1 3.3.1 NZS 4251: Part 1 is an acceptable solution for meeting the durability requirements of cement plasters for walls, ceilings and soffits within its scope. building, wall, ceiling, soffit, durability, nzs 4251 1, nzbc b2as1", ["if( or( expression( function( for), atom( variable( cement plaster)), data( wall)), expression( function( for), atom( variable( cement plaster)), data( ceiling)), expression( function( for), atom( variable( cement plaster)), data( soffit)))), then( permission( expression( function( comply with), atom( relation( durability), variable( cement plaster)), data( nzs 4251 1))))"], "if( and( or( expression( function( for), atom( variable( building)), data( wall)), expression( function( for), atom( variable( building)), data( ceiling)), expression( function( for), atom( variable( building)), data( soffit))), expression( function( comply with), atom( relation( durability), variable( wall)), data( cement plaster)), expression( function( as per), atom( relation( durability), variable( cement plaster)), data( nzs 4251 1)))), then( permission( expression( function( comply with), atom( variable( nzs 4251 1)), data( soffit))))", "if( for( cement plaster, or( wall, ceiling, soffit))), then( permission( comply with( cement plaster. durability, nzs 4251 1)))", "if( and( for( building, or( wall, ceiling, soffit)), comply with( wall. durability, cement plaster), as per( cement plaster. durability, nzs 4251 1))), then( permission( comply with( nzs 4251 1, soffit)))"], ["translate English to LegalRuleML: B2AS1 3.4.1 NZS 4297 and NZS 4299 are acceptable solutions for meeting the durability requirements of earth buildings within their scope. building, material, earth, durability, nzs 4297, nzs 4299", ["if( expression( function( is), atom( relation( material), variable( building)), data( earth))), then( and( permission( expression( function( comply with), atom( relation( durability), variable( building)), data( nzs 4297))), permission( expression( function( comply with), atom( relation( durability), variable( building)), data( nzs 4299)))))"], "if( expression( function( is), atom( relation( material), variable( building)), data( earth))), then( and( permission( expression( function( comply with), atom( relation( durability), variable( building)), data( nzs 4297))), permission( expression( function( comply with), atom( relation( durability), variable( building)), data( nzs 4299)))))", "if( is( building. material, earth)), then( permission( comply with( building. durability, and( nzs 4297, nzs 4299))))", "if( is( building. material, earth)), then( permission( comply with( building. durability, and( nzs 4297, nzs 4299))))"], ["translate English to LegalRuleML: B2AS1 3.5.1 NZS 4223.2 is an Acceptable Solution for meeting the durability requirements of insulating glass units, within its scope. insulating glass unit, durability, nzs 4223 3", ["if( expression( function( exist), atom( variable( insulated glass unit)))), then( permission( expression( function( comply with), atom( relation( durability), variable( insulated glass unit)), data( nzs 4223 2))))"], "if( expression( function( exist), atom( variable( insulating glass unit)))), then( permission( expression( function( comply with), atom( relation( durability), variable( insulating glass unit)), data( nzs 4223 3))))", "if( exist( insulated glass unit)), then( permission( comply with( insulated glass unit. durability, nzs 4223 2)))", "if( exist( insulating glass unit)), then( permission( comply with( insulating glass unit. durability, nzs 4223 3)))"], ["translate English to LegalRuleML: B1AS1 3.0 Timber; The combined foundation and edge details shall be constructed as shown in Figures 7.13(B), 7.14(B) or (C). timber, foundation, edge detail, combined, nzbc b1as1 f7, 13 b, nzbc b1, nzbc b2 f7, nzbc b2", ["if( expression( function( is), atom( relation( material), variable( construction)), data( timber))), then( obligation( and( expression( function( as per), atom( relation( construction), variable( foundation)), data( nzbc b1as1 f7.13.b)), expression( function( as per), atom( relation( construction), variable( foundation)), data( nzbc b1as1 f7.14.b)), expression( function( as per), atom( relation( construction), variable( foundation)), data( nzbc b1as1 f7.14.c)), expression( function( as per), atom( relation( construction), variable( edge)), data( nzbc b1as1 f7.13.b)), expression( function( as per), atom( relation( construction), variable( edge)), data( nzbc b1as1 f7.14.b)), expression( function( as per), atom( relation( construction), variable( edge)), data( nzbc b1as1 f7.14.c)))))"], "if( and( or( expression( function( has), atom( variable( timber)), data( foundation)), expression( function( has), atom( variable( timber)), data( edge detail))), expression( function( is), atom( variable( edge detail)), data( combined)))), then( or( obligation( expression( function( as per), atom( variable( timber)), data( nzbc b1as1 f7.b))), obligation( expression( function( as per), atom( variable( timber)), data( nzbc b1))), obligation( expression( function( as per), atom( variable( timber)), data( nzbc b2 f7)))))", "if( is( construction. material, timber)), then( obligation( and( as per( foundation. construction, and( nzbc b1as1 f7.13.b, nzbc b1as1 f7.14.b, nzbc b1as1 f7.14.c)), as per( edge. construction, and( nzbc b1as1 f7.13.b, nzbc b1as1 f7.14.b, nzbc b1as1 f7.14.c)))))", "if( and( has( timber, or( foundation, edge detail)), is( edge detail, combined))), then( obligation( as per( timber, or( nzbc b1as1 f7.b, nzbc b1, nzbc b2 f7))))"], ["translate English to LegalRuleML: B1AS1 Structure Design; Interlinking rails are not required for a heat-strengthened or toughened laminated safety glass barrier that: has a stiff interlayer and will, when both panes of the laminate are fractured, resist a 0.2 kN concentrated load and not deflect more than 250 mm (see note 2). safety barrier, material, glass, type, laminated, heat strengthened, toughened, interlayer, pane, stiff, fractured, resistance, concentrated load, 0.2 kN, deflection, 250 mm, rail, interlinked", ["if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), expression( function( has), atom( variable( safety barrier)), data( stiff interlayer)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( laminate)), expression( function( is), atom( relation( panes), variable( safety barrier)), data( fractured)), expression( function( against), atom( relation( resistance), variable( panes)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( panes)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))"], "if( and( expression( function( is), atom( relation( material), variable( safety barrier)), data( glass)), expression( function( is), atom( relation( type), variable( glass)), data( laminated)), or( expression( function( is), atom( variable( glass)), data( heat strengthened)), expression( function( is), atom( variable( glass)), data( toughened))), expression( function( has), atom( variable( glass)), data( interlayer)), expression( function( is), atom( relation( pane), variable( glass)), data( stiff)), expression( function( is), atom( variable( pane)), data( fractured))), expression( function( against), atom( relation( resistance), variable( pane)), data( concentrated load)), expression( function( less than equal), atom( variable( concentrated load)), data( baseunit( prefix( kilo), kind( newton)), value( 0.2))), expression( function( is), atom( relation( type), variable( resistance)), data( concentrated load)), expression( function( less than equal), atom( relation( deflection), variable( pane)), data( baseunit( prefix( milli), kind( metre)), value( 250.0)))), then( permission( not( expression( function( is), atom( relation( rail), variable( safety barrier)), data( interlinked)))))", "if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), has( safety barrier, stiff interlayer), is( safety barrier. panes, and( laminate, fractured)), against( panes. resistance, concentrated load), less than equal( concentrated load, 0.2 kN), is( resistance. type, concentrated load), less than equal( panes. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))", "if( and( is( safety barrier. material, glass), is( glass. type, laminated), is( glass, or( heat strengthened, toughened)), has( glass, interlayer), is( glass. pane, stiff), is( pane, fractured)), against( pane. resistance, concentrated load), less than equal( concentrated load, 0.2 kN), is( resistance. type, concentrated load), less than equal( pane. deflection, 250 mm))), then( permission( not( is( safety barrier. rail, interlinked))))"], ["translate English to LegalRuleML: E2AS1 Cladding system 4.1 Materials for flashings; Acceptable materials for flashing junctions and penetrations are described in Paragraph 4.3. flashing, junction, material, nzbc e2as1 4.3", ["if( or( expression( function( has), atom( variable( flashing)), data( junction)), expression( function( has), atom( variable( flashing)), data( penetration)))), then( obligation( and( expression( function( as per), atom( relation( material), variable( junction)), data( nzbc e2as1 4.3)), expression( function( as per), atom( relation( material), variable( penetration)), data( nzbc e2as1 4.3)))))"], "if( or( expression( function( for), atom( variable( flashing)), data( junction)), expression( function( for), atom( variable( flashing)), data( penetration)))), then( permission( expression( function( as per), atom( variable( material)), data( nzbc e2as1 4.3))))", "if( has( flashing, or( junction, penetration))), then( obligation( and( as per( junction. material, nzbc e2as1 4.3), as per( penetration. material, nzbc e2as1 4.3))))", "if( for( flashing, or( junction, penetration))), then( permission( as per( material, nzbc e2as1 4.3)))"], ["translate English to LegalRuleML: D1AS1 1.3.1 Except in household units (risk group SH1) or where permitted by Paragraph 1.3.2, a single isolated step shall not be permitted. household unit, risk group, sh1, step, 1, isolated, nzbc d1as1 1.3.2", ["if( and( not( expression( function( is), atom( relation( classified use), variable( building)), data( housing))), not( expression( function( is), atom( relation( risk group), variable( building)), data( sh1))), not( permission( expression( function( as per), atom( relation( single isolated step), variable( building)), data( nzbc d1as1 1.3.2)))))), then( obligation( not( expression( function( has), atom( variable( building)), data( single isolated step)))))"], "if( or( expression( function( is), atom( relation( risk group), variable( household unit)), data( sh1)), and( expression( function( greater than equal), expression( function( count), atom( relation( step), variable( household unit))), data( 1)), expression( function( is), atom( relation( type), variable( step)), data( isolated))))), then( obligation( not( expression( function( as per), atom( variable( step)), data( nzbc d1as1 1.3.2)))))", "if( and( not( is( building. classified use, housing)), not( is( building. risk group, sh1)), not( permission( as per( building. single isolated step, nzbc d1as1 1.3.2))))), then( obligation( not( has( building, single isolated step))))", "if( or( is( household unit. risk group, sh1), and( greater than equal( count( household unit. step), 1), is( step. type, isolated)))), then( obligation( not( as per( step, nzbc d1as1 1.3.2))))"], ["translate English to LegalRuleML: B1AS1 Structure Design 5.0 Stucco 5.1 NZS 4251. structure, material, concrete, design, nzs 4251", ["if( expression( function( is), atom( relation( material), variable( construction)), data( stucco))), then( expression( function( comply with), atom( relation( design), variable( structure)), data( nzs 4251)))"], "if( expression( function( is), atom( relation( material), variable( structure)), data( concrete))), then( obligation( expression( function( comply with), atom( relation( design), variable( structure)), data( nzs 4251))))", "if( is( construction. material, stucco)), then( comply with( structure. design, nzs 4251))", "if( is( structure. material, concrete)), then( obligation( comply with( structure. design, nzs 4251)))"], ["translate English to LegalRuleML: B1AS1 Structure Design 7.0 Glazing; Table 14 - Structural balustrade \u2013 cantilevered glass; Table 15 - Structural balustrade \u2013 two-edge point fixed; Table 16 - Structural balustrade \u2013 two-edge support; Table 17 - Structural balustrade \u2013 three-edge support. Design types and glass types not shown in Tables 14 to 17 require specific design. structure, balustrade, type, cantilevered glass, nzbc b1as1 t14, fixing, balustrade, two edge point fixed, support, two edge support, three edge support, nzbc br1as1 t16, design, glass", ["if( and( expression( function( is), atom( variable( structure)), data( balustrade)), not( expression( function( is), atom( relation( design), variable( balustrade)), data( cantilevered glass))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge point fixed))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( two edge support))), not( expression( function( is), atom( relation( design), variable( balustrade)), data( three edge support))))), then( obligation( expression( function( is), atom( relation( design), variable( balustrade)), data( specific design))))"], "if( and( expression( function( is), atom( variable( structure)), data( balustrade)), expression( function( is), atom( relation( type), variable( balustrade)), data( cantilevered glass)))), then( obligation( and( expression( function( as per), atom( relation( fixing), variable( structure)), data( nzbc b1as1 t14)), not( expression( function( is), atom( relation( type), variable( balustrade)), data( two edge point fixed))), expression( function( as per), atom( variable( structure)), data( balustrade)), expression( function( as per), atom( variable( structure)), data( two edge support)), expression( function( as per), atom( relation( support), variable( structure)), data( nzbc br1as1 t16))), expression( function( has), atom( variable( structure)), data( three edge support))))", "if( and( is( structure, balustrade), not( is( balustrade. design, and( cantilevered glass, two edge point fixed, two edge support, three edge support))))), then( obligation( is( balustrade. design, specific design)))", "if( and( is( structure, balustrade), is( balustrade. type, cantilevered glass))), then( obligation( and( as per( structure. fixing, nzbc b1as1 t14), not( is( balustrade. type, two edge point fixed)), as per( structure, and( balustrade, two edge support)), as per( structure. support, nzbc br1as1 t16)), has( structure, three edge support))))"], ["translate English to LegalRuleML: E2AS1 7.1.2 Enclosed decks; This Acceptable Solution is limited to enclosed decks with a maximum area of 40 m2. For enclosed decks, the vertical separation between the opening threshold level and the upper surface of the finished deck surface shall be a minimum of 100 mm. deck, enclosed, area, 40 m2, opening threshold level, upper surface, finished deck, vertical separation, 100 mm", ["if( and( expression( function( is), atom( variable( deck)), data( enclosed)), expression( function( less than equal), atom( relation( area), variable( deck)), data( baseunit( exponent( 2.0), kind( metre)), value( 40.0))))), then( and( expression( function( apply to), atom( variable( nzbc e2as1)), data( deck)), obligation( and( expression( function( is), atom( relation( surface), variable( deck)), data( finished)), expression( function( define), atom( relation( threshold level), variable( deck)), data( x0)), expression( function( define), atom( relation( upper surface level), variable( deck)), data( x1)), expression( function( in between), atom( variable( separation)), data( x0)), expression( function( in between), atom( variable( separation)), data( x1)), expression( function( greater than equal), atom( variable( separation)), data( baseunit( prefix( milli), kind( metre)), value( 100.0)))))))"], "if( and( expression( function( is), atom( variable( deck)), data( enclosed)), expression( function( less than equal), atom( relation( area), variable( deck)), data( baseunit( exponent( 2.0), kind( metre)), value( 40.0))))), then( obligation( and( expression( function( has), atom( variable( deck)), data( opening threshold level)), expression( function( has), atom( variable( deck)), data( upper surface)), expression( function( is), atom( relation( vertical separation), variable( upper surface)), data( x0)), expression( function( greater than equal), atom( variable( vertical separation)), data( baseunit( prefix( milli), kind( metre)), value( 100.0))))))", "if( and( is( deck, enclosed), less than equal( deck. area, 40 m2))), then( and( apply to( nzbc e2as1, deck), obligation( and( is( deck. surface, finished), define( deck. threshold level, x0), define( deck. upper surface level, x1), in between( separation, and( x0, x1)), greater than equal( separation, 100 mm)))))", "if( and( is( deck, enclosed), less than equal( deck. area, 40 m2)), then( obligation( and( has( deck, opening threshold level), has( deck, upper surface), is( upper surface. vertical separation, x0), greater than equal( vertical separation, 100 mm))))"], ["translate English to LegalRuleML: E2AS1 Where roof penetrations are required for large openings such as roof lights and chimneys, this Acceptable Solution is limited to the following requirements: Rules 8.1.7.0.2.a.1 and 8.1.7.0.2.b.1. roof, penetration, large opening, roof light, chimney, nzbc e2as1", ["if( and( expression( function( for), atom( relation( penetration), variable( roof)), data( opening)), expression( function( is), atom( variable( opening)), data( large)), expression( function( similar to), atom( variable( opening)), data( roof light)), expression( function( similar to), atom( variable( opening)), data( chimney)))), then( and( expression( function( apply to), atom( relation(a.1), variable( nzbc e2as1 8.1.7.0.2)), data( penetration)), expression( function( apply to), atom( relation(b.1), variable( nzbc e2as1 8.1.7.0.2)), data( penetration))))"], "if( and( expression( function( has), atom( variable( roof)), data( penetration)), or( expression( function( for), atom( variable( penetration)), data( large opening)), expression( function( for), atom( variable( penetration)), data( roof light)), expression( function( for), atom( variable( penetration)), data( chimney))))), then( and( expression( function( apply to), atom( variable( nzbc e2as1)), data( rules)), expression( function( apply to), atom( variable( nzbc e2as1)), data( 8.1.7.0.2.a.1)), expression( function( apply to), atom( variable( nzbc e2as1)), data( 8.1.7.0.2.b.1))))", "if( and( for( roof. penetration, opening), is( opening, large), similar to( opening, and( roof light, chimney)))), then( and( apply to( nzbc e2as1 8.1.7.0.2.a.1, penetration), apply to( nzbc e2as1 8.1.7.0.2.b.1, penetration)))", "if( and( has( roof, penetration), for( penetration, or( large opening, roof light, chimney)))), then( apply to( nzbc e2as1, and( rules, and( 8.1.7.0.2.a.1, 8.1.7.0.2.b.1)))))"], ["translate English to LegalRuleML: E2AS1 8.2.1 Materials; Concrete tiles shall meet the requirements of NZS 4206 or AS 2049. tile, material, concrete, nzs 4206, as 2049", ["if( expression( function( is), atom( relation( material), variable( tile)), data( concrete))), then( or( obligation( expression( function( comply with), atom( variable( tile)), data( nzs 4206))), obligation( expression( function( comply with), atom( variable( tile)), data( as 2049)))))"], "if( expression( function( is), atom( relation( material), variable( tile)), data( concrete))), then( or( obligation( expression( function( comply with), atom( variable( tile)), data( nzs 4206))), obligation( expression( function( comply with), atom( variable( tile)), data( as 2049)))))", "if( is( tile. material, concrete)), then( obligation( comply with( tile, or( nzs 4206, as 2049))))", "if( is( tile. material, concrete)), then( obligation( comply with( tile, or( nzs 4206, as 2049))))"], ["translate English to LegalRuleML: E2AS1 8.2.1 Materials; Clay tiles shall meet the requirements of AS 2049. tile, material, clay, nzbc e2as1 2049", ["if( expression( function( is), atom( relation( material), variable( tile)), data( clay))), then( obligation( expression( function( comply with), atom( variable( tile)), data( as 2049))))"], "if( expression( function( is), atom( relation( material), variable( tile)), data( clay))), then( obligation( expression( function( comply with), atom( variable( tile)), data( nzbc e2as1 2049))))", "if( is( tile. material, clay)), then( obligation( comply with( tile, as 2049)))", "if( is( tile. material, clay)), then( obligation( comply with( tile, nzbc e2as1 2049)))"], ["translate English to LegalRuleML: E2AS1 Internal gutters shall be as shown in Figure 52 and Paragraph 8.1.6.1. gutter, type, internal, nzbc e2as1 f52, nzbc e2-as1 8.1.6.1", ["if( expression( function( is), atom( relation( type), variable( gutter)), data( internal))), then( and( obligation( expression( function( comply with), atom( variable( gutter)), data( nzbc e2as1 f52))), obligation( expression( function( comply with), atom( variable( gutter)), data( nzbc e2as1 8.1.6.1)))))"], "if( and( expression( function( is), atom( relation( type), variable( gutter)), data( internal)))), then( and( obligation( expression( function( as per), atom( variable( gutter)), data( nzbc e2as1 f52))), obligation( expression( function( as per), atom( variable( gutter)), data( nzbc e2-as1 8.1.6.1)))))", "if( is( gutter. type, internal)), then( obligation( comply with( gutter, and( nzbc e2as1 f52, nzbc e2as1 8.1.6.1))))", "if( and( is( gutter. type, internal))), then( obligation( as per( gutter, and( nzbc e2as1 f52, nzbc e2-as1 8.1.6.1))))"], ["translate English to LegalRuleML: E2AS1 9.0 Wall claddings; 9.2.2 General 1) The materials and workmanship of masonry veneer shall be in accordance with SNZ HB 4236 and have a maximum mass of veneer of 220 kg/m2 and minimum veneer thickness of 70 mm. wall cladding, material, masonry veneer, nzbc e2as1 4236, mass, 220 kg/m2, thickness, 70 mm, workmanship", ["if( and( expression( function( is), atom( relation( application), variable( cladding)), data( wall)), expression( function( is), atom( relation( system), variable( cladding)), data( masonry veneer)))), then( obligation( and( expression( function( comply with), atom( relation( material), variable( masonry veneer)), data( snz hb 4236)), expression( function( comply with), atom( relation( workmanship), variable( masonry veneer)), data( snz hb 4236)), expression( function( less than equal), atom( relation( mass), variable( masonry veneer)), data( derivedunit( baseunit( prefix( kilo), kind( gram)), operator( name(division)), baseunit( exponent( 2.0), kind( metre))), value( 220.0))), expression( function( greater than equal), atom( relation( thickness), variable( masonry veneer)), data( baseunit( prefix( milli), kind( metre)), value( 70.0))))))"], "if( expression( function( is), atom( relation( material), variable( wall cladding)), data( masonry veneer))), then( obligation( and( expression( function( as per), atom( relation( material), variable( veneer)), data( nzbc e2as1 4236)), expression( function( greater than equal), atom( relation( mass), variable( veneer)), data( derivedunit( baseunit( prefix( kilo), kind( gram)), operator( name(division)), baseunit( exponent( 2.0), kind( metre))), value( 220.0))), expression( function( greater than equal), atom( relation( thickness), variable( veneer)), data( baseunit( prefix( milli), kind( metre)), value( 70.0))), expression( function( as per), atom( relation( workmanship), variable( veneer)), data( nzbc e3as1 4236)))))", "if( and( is( cladding. application, wall), is( cladding. system, masonry veneer))), then( obligation( and( comply with( masonry veneer. material, snz hb 4236), comply with( masonry veneer. workmanship, snz hb 4236), less than equal( masonry veneer. mass, 220 kg/m2), greater than equal( masonry veneer. thickness, 70 mm))))", "if( is( wall cladding. material, masonry veneer)), then( obligation( and( as per( veneer. material, nzbc e2as1 4236), greater than equal( veneer. mass, 220 kg/m2), greater than equal( veneer. thickness, 70 mm), as per( veneer. workmanship, nzbc e3as1 4236))))"], ["translate English to LegalRuleML: G12AS2 5.0.2 Water storage tanks that form part of a solar water heater must have drain pipes that: a) have an easily reached isolating valve, and terminate with a cap or plug to empty the vessel for maintenance, or b) terminate outside the building with a cap only. solar water heater, water storage tank, drain pipe, isolating valve, easy reach, termination, cap, plug, emptying, building, cap only", ["if( expression( function( part of), atom( variable( water storage tank)), data( solar water heater))), then( obligation( and( expression( function( has), atom( variable( water storage tank)), data( drain pipe)), or( and( expression( function( has), atom( variable( drain pipe)), data( isolating valve)), expression( function( is), atom( variable( isolating valve)), data( easily reached)), or( expression( function( has), atom( relation( termination point), variable( drain pipe)), data( cap)), expression( function( has), atom( relation( termination point), variable( drain pipe)), data( plug)))), and( expression( function( outside), atom( relation( termination point), variable( drain pipe)), data( building)), expression( function( by), atom( relation( termination point), variable( drain pipe)), data( cap)))))))"], "if( expression( function( part of), atom( variable( solar water heater)), data( water storage tank))), then( obligation( or( and( expression( function( has), atom( variable( water storage tank)), data( drain pipe)), expression( function( has), atom( variable( drain pipe)), data( isolating valve)), expression( function( isolating valve)), expression( function( easy reach))), and( or( expression( function( has), atom( variable( drain pipe)), data( cap)), expression( function( has), atom( variable( drain pipe)), data( plug))), expression( function( for), atom( relation( termination), variable( drain pipe)), data( maintenance)), expression( function( outside), atom( relation( termination), variable( drain pipe)), data( building)), expression( function( has), atom( variable( drain pipe)), data( cap only))))))", "if( part of( water storage tank, solar water heater)), then( obligation( and( has( water storage tank, drain pipe), or( and( has( drain pipe, isolating valve), is( isolating valve, easily reached), has( drain pipe. termination point, or( cap, plug))), and( outside( drain pipe. termination point, building), by( drain pipe. termination point, cap))))))", "if( part of( solar water heater, water storage tank)), then( obligation( or( and( has( water storage tank, drain pipe), has( drain pipe, isolating valve), isolating valve, easy reach), and( has( drain pipe, or( cap, plug)), for( drain pipe. termination, maintenance), outside( drain pipe. termination, building), has( drain pipe, cap only)))))"], ["translate English to LegalRuleML: E2AS1 The bottom of the EIFS cladding shall be as shown in Figure 125. cladding, type, eifs, bottom, nzbc e2as1 f125", ["if( expression( function( is), atom( relation( type), variable( cladding)), data( eifs))), then( obligation( expression( function( as per), atom( relation( bottom), variable( cladding)), data( nzbc e2as1 f125))))"], "if( expression( function( is), atom( relation( type), variable( cladding)), data( eifs))), then( obligation( expression( function( as per), atom( relation( bottom), variable( cladding)), data( nzbc e2as1 f125))))", "if( is( cladding. type, eifs)), then( obligation( as per( cladding. bottom, nzbc e2as1 f125)))", "if( is( cladding. type, eifs)), then( obligation( as per( cladding. bottom, nzbc e2as1 f125)))"], ["translate English to LegalRuleML: G13AS1 5.3.1 Fixture vent pipes, branch vent pipes, discharge stack vents and relief vents shall have a diameter of no less than that given in Table 6. ventilation pipe, type, fixture vent pipe, branch vent pipe, discharge stack vent, relief vent, diameter, nzbc g13as1 t6", ["if( or( expression( function( for), atom( variable( ventilation pipe)), data( fixture)), expression( function( for), atom( variable( ventilation pipe)), data( branch)), expression( function( for), atom( variable( ventilation)), data( discharge stack)), expression( function( for), atom( variable( ventilation)), data( relief)))), then( obligation( and( expression( function( greater than equal), atom( relation( diameter), variable( ventilation pipe)), data( value)), expression( function( greater than equal), atom( relation( diameter), variable( ventilation)), data( value)), expression( function( as per), atom( variable( value)), data( nzbc g13as1 t6)))))"], "if( or( expression( function( is), atom( relation( type), variable( ventilation pipe)), data( fixture vent pipe)), expression( function( is), atom( relation( type), variable( ventilation pipe)), data( branch vent pipe)), expression( function( is), atom( relation( type), variable( ventilation pipe)), data( discharge stack vent)), expression( function( is), atom( relation( type), variable( ventilation pipe)), data( relief vent)))), then( obligation( expression( function( as per), atom( relation( diameter), variable( ventilation pipe)), data( nzbc g13as1 t6))))", "if( or( for( ventilation pipe, or( fixture, branch)), for( ventilation, or( discharge stack, relief)))), then( obligation( and( greater than equal( ventilation pipe. diameter, value), greater than equal( ventilation. diameter, value), as per( value, nzbc g13as1 t6))))", "if( is( ventilation pipe. type, or( fixture vent pipe, branch vent pipe, discharge stack vent, relief vent))), then( obligation( as per( ventilation pipe. diameter, nzbc g13as1 t6)))"], ["translate English to LegalRuleML: G13AS1 1.0.2 The solution does not include: a) Specialised types of sanitary fixtures or sanitary appliances used within buildings such as hospitals, laboratories and factories. sanitary fixture, type, specialised, sanitary appliance, building, hospital, laboratory, factory", ["if( and( or( and( expression( function( is), atom( relation( type), variable( sanitary fixture)), data( specialised)), expression( function( within), atom( variable( sanitary fixture)), data( building))), and( expression( function( is), atom( relation( type), variable( sanitary appliance)), data( specialised)), expression( function( within), atom( variable( sanitary appliance)), data( building)))), or( expression( function( similar to), atom( relation( type), variable( building)), data( hospital)), expression( function( similar to), atom( relation( type), variable( building)), data( laboratory)), expression( function( similar to), atom( relation( type), variable( building)), data( factory))))), then( and( expression( function( apply to), atom( variable( nzbc g13as1)), data( sanitary fixture)), expression( function( apply to), atom( variable( nzbc g13as1)), data( sanitary appliance))))"], "if( or( expression( function( is), atom( relation( type), variable( sanitary fixture)), data( specialised)), expression( function( is), atom( relation( type), variable( sanitary appliance)), data( building)), or( expression( function( is), atom( relation( location), variable( sanitary fixture)), data( hospital)), expression( function( is), atom( relation( location), variable( sanitary fixture)), data( laboratory)), expression( function( is), atom( relation( location), variable( sanitary fixture)), data( factory))))), then( or( not( expression( function( apply to), atom( variable( g13as1)), data( sanitary fixture))), not( expression( function( apply to), atom( variable( g13as1)), data( sanitary appliance)))))", "if( and( or( and( is( sanitary fixture. type, specialised), within( sanitary fixture, building)), and( is( sanitary appliance. type, specialised), within( sanitary appliance, building))), similar to( building. type, or( hospital, laboratory, factory)))), then( and( apply to( nzbc g13as1, sanitary fixture), apply to( nzbc g13as1, sanitary appliance)))", "if( or( is( sanitary fixture. type, specialised), is( sanitary appliance. type, building), or( is( sanitary fixture. location, or( hospital, laboratory, factory))))), then( not( apply to( g13as1, or( sanitary fixture, sanitary appliance)),))"], ["translate English to LegalRuleML: G13AS2 Drainage 3.3.1 All gully traps shall have (see Figures 2 and 3): Waste pipe outlets located at least 20 mm above water seal level, and at least 20 mm below the grating. gully trap, waste pipe outlet, location, water seal level, grating, 20 mm", ["if( expression( function( exist), atom( variable( gully trap)))), then( obligation( and( expression( function( has), atom( variable( gully trap)), data( waste pipe outlet)), expression( function( define), atom( relation( elevation), variable( water seal)), data( x0)), expression( function( greater than equal), atom( relation( elevation), variable( waste pipe outlet)), data( 'x0 + 20 mm')), expression( function( define), atom( relation( elevation), variable( grating)), data( x1)), expression( function( less than equal), atom( relation( elevation), variable( waste pipe outlet)), data( 'x1 - 20 mm')))))"], "if( expression( function( exist), atom( variable( gully trap)))), then( obligation( and( expression( function( has), atom( variable( gully trap)), data( waste pipe outlet)), expression( function( above), atom( relation( location), variable( waste pipe outlet)), data( water seal level)), expression( function( below), atom( relation( location), variable( waste pipe outlet)), data( grating)), expression( function( greater than equal), atom( relation( location), variable( waste pipe outlet)), data( water sealing level)), expression( function( less than equal), atom( relation( length), variable( waste pipe outlet)), data( baseunit( prefix( milli), kind( metre)), value( 20.0))))))", "if( exist( gully trap)), then( obligation( and( has( gully trap, waste pipe outlet), define( water seal. elevation, x0), greater than equal( waste pipe outlet. elevation, 'x0 + 20 mm'), define( grating. elevation, x1), less than equal( waste pipe outlet. elevation, 'x1 - 20 mm'))))", "if( exist( gully trap)), then( obligation( and( has( gully trap, waste pipe outlet), above( waste pipe outlet. location, water seal level), below( waste pipe outlet. location, grating), greater than equal( waste pipe outlet. location, water sealing level), less than equal( waste pipe outlet. length, 20 mm)))))"], ["translate English to LegalRuleML: G13AS2 3.4.3 The capacity of a grease trap shall be at least twice the capacity of all sanitary fixtures and sanitary appliances discharging to it, and in no case less than 100 litres as shown in Figure 4. grease trap, capacity, sanitary fixture, sanitary appliance, discharge, 'x0 + 100 l'", ["if( expression( function( exist), atom( variable( grease trap)))), then( and( expression( function( into), atom( relation( discharge), variable( sanitary fixtures)), data( grease trap)), expression( function( define), expression( function( sum), atom( relation( capacity), variable( sanitary fixtures))), data( x0)), expression( function( into), atom( relation( discharge), variable( sanitary appliances)), data( grease trap)), expression( function( define), expression( function( sum), atom( relation( capacity), variable( sanitary appliances))), data( x1)), obligation( expression( function( greater than equal), atom( relation( capacity), variable( grease trap)), data( '2 * (x0 + x1)'))), obligation( expression( function( greater than equal), atom( relation( capacity), variable( grease trap)), data( baseunit( kind( litre)), value( 100.0))))))"], "if( expression( function( exist), atom( variable( grease trap)))), then( obligation( and( expression( function( define), atom( relation( capacity), variable( sanitary fixture)), data( x0)), expression( function( define), atom( relation( capacity), variable( sanitary appliance)), data( x1)), expression( function( greater than equal), atom( relation( discharge), variable( grease trap)), data( 'x0 + 100 l')))))", "if( exist( grease trap)), then( and( into( sanitary fixtures. discharge, grease trap), define( sum( sanitary fixtures. capacity), x0), into( sanitary appliances. discharge, grease trap), define( sum( sanitary appliances. capacity), x1), obligation( greater than equal( grease trap. capacity, and( '2 * (x0 + x1)', 100 l)))))", "if( exist( grease trap)), then( obligation( and( define( sanitary fixture. capacity, x0), define( sanitary appliance. capacity, x1), greater than equal( grease trap. discharge, 'x0 + 100 l'))))"], ["translate English to LegalRuleML: G13AS1 6.1.1 Jointing methods for PVC-U pipe shall comply with AS/NZS 2032. pipe, material, pvc u, joint method, nzs 2032", ["if( expression( function( is), atom( relation( material), variable( pipe)), data( pvc u))), then( obligation( expression( function( comply with), atom( relation( jointing method), variable( pipe)), data( nzs 2032))))"], "if( expression( function( is), atom( relation( material), variable( pipe)), data( pvc u))), then( obligation( expression( function( comply with), atom( relation( joint method), variable( pipe)), data( nzs 2032))))", "if( is( pipe. material, pvc u)), then( obligation( comply with( pipe. jointing method, nzs 2032)))", "if( is( pipe. material, pvc u)), then( obligation( comply with( pipe. joint method, nzs 2032)))"], ["translate English to LegalRuleML: G13AS1 6.4.1 Fire stopping shall be fitted to pipes passing through fire separations in accordance with C/AS2 Paragraph 4.4. pipe, fire separation, fire stopping, nzbc g13as1 4.4", ["if( expression( function( through), atom( variable( pipe)), data( fire separation))), then( obligation( and( expression( function( has), atom( variable( pipe)), data( fire stop)), expression( function( as per), atom( variable( fire stop)), data( nzbc cas2 4.4)))))"], "if( expression( function( through), atom( variable( pipe)), data( fire separation))), then( obligation( and( expression( function( has), atom( variable( pipe)), data( fire stopping)), expression( function( comply with), atom( variable( fire stopping)), data( nzbc g13as1 4.4)))))", "if( through( pipe, fire separation)), then( obligation( and( has( pipe, fire stop), as per( fire stop, nzbc cas2 4.4))))", "if( through( pipe, fire separation)), then( obligation( and( has( pipe, fire stopping), comply with( fire stopping, nzbc g13as1 4.4))))"], ["translate English to LegalRuleML: G15AS1 4.0.2 Side-entry hoppers (see Figure 2) shall: a) Have a maximum opening diameter of 250 mm, b) Have self-closing, tight-fitting doors to prevent odours escaping, c) Have an easily cleaned wall surface surrounding the opening for 300 mm (this may be galvanised steel, ceramic tiles or similar material), d) Be located outside any dwelling or enclosed stair access, and away from any habitable space or food preparation area, and e) Have adequate ventilation, preferably by being located in the open air (e.g. on an outside balcony). Where hoppers are inside buildings, they shall be located in separate ventilated compartments complying with NZBC G4. hopper, type, side entry, opening diameter, 250 mm, door, self closing, tight fitting, opening, wall surface, 300 mm, easily cleaned, location, dwelling, stair access, enclosed, habitable space, food preparation area, ventilation, open air, location, nzbc g4, building, compartment, ventilation, nzbc g4", ["if( expression( function( exist), atom( variable( side entry hopper)))), then( obligation( and( expression( function( has), atom( variable( side entry hopper)), data( opening)), expression( function( less than equal), atom( relation( diameter), variable( opening)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))), expression( function( has), atom( variable( side entry hopper)), data( door)), expression( function( is), atom( variable( door)), data( self closing)), expression( function( is), atom( variable( door)), data( tight fitting)), expression( function( has), atom( variable( side entry hopper)), data( wall)), expression( function( around), atom( relation( surface), variable( wall)), data( opening)), expression( function( greater than equal), atom( relation( surface), variable( wall)), data( baseunit( prefix( milli), kind( metre)), value( 300.0))), expression( function( is), atom( relation( surface), variable( wall)), data( easily cleaned)), expression( function( outside), atom( relation( location), variable( side entry hopper)), data( dwelling)), expression( function( outside), atom( relation( location), variable( side entry hopper)), data( enclosed stair access)), expression( function( away from), atom( relation( location), variable( side entry hopper)), data( habitable space)), expression( function( away from), atom( relation( location), variable( side entry hopper)), data( food preparation area)), expression( function( has), atom( variable( side entry hopper)), data( ventilation)), or( expression( function( is), atom( relation( location), variable( side entry hopper)), data( open air)), and( expression( function( is), atom( relation( location), variable( side entry hopper)), data( ventilated compartment)), expression( rulestatement( expression( function( for each), atom( variable( ventilated compartment)))), appliedstatement( expression( function( is), expression( function( count), atom( relation( side entry hopper), variable( ventilated compartment))), data( 1)))), expression( function( comply with), atom( variable( ventilated compartment)), data( nzbc g4)))))))"], "if( expression( function( is), atom( relation( type), variable( hopper)), data( side entry))), then( obligation( and( expression( function( greater than equal), atom( relation( opening diameter), variable( hopper)), data( baseunit( prefix( milli), kind( metre)), value( 250.0))), expression( function( has), atom( variable( hopper)), data( door)), expression( function( is), atom( variable( door)), data( self closing)), expression( function( is), atom( variable( door)), data( tight fitting))), expression( function( has), atom( variable( hopper)), data( opening)), expression( function( surround), atom( variable( wall surface)), data( opening)), expression( function( is), atom( variable( wall surface)), data( easily cleaned)), or( and( or( expression( function( is), atom( relation( material), variable( wall surface)), data( galvanised steel)), expression( function( is), atom( relation( material), variable( wall surface)), data( ceramic tile))), or( expression( function( is), atom( relation( location), variable( wall surface)), data( dwelling)), expression( function( is), atom( relation( location), variable( wall surface)), data( stair access))), expression( function( is), atom( relation( location), variable( hopper)), data( enclosed)), or( expression( function( away from), atom( relation( location), variable( hopper)), data( habitable space)), expression( function( away from), atom( relation( location), variable( hopper)), data( food preparation area))), expression( function( has), atom( variable( hopper)), data( ventilation)), expression( function( is), atom( variable( ventilation)), data( open air)), expression( function( comply with), atom( variable( ventilation)), data( nzbc g4))))))", "if( exist( side entry hopper)), then( obligation( and( has( side entry hopper, opening), less than equal( opening. diameter, 250 mm), has( side entry hopper, door), is( door, self closing), is( door, tight fitting), has( side entry hopper, wall), has( side entry hopper, opening), around( wall. surface, opening), greater than equal( wall. surface, 300 mm), is( wall. surface, easily cleaned), outside( side entry hopper. location, and( dwelling, enclosed stair access)), away from( side entry hopper. location, and( habitable space, food preparation area)), has( side entry hopper, ventilation), or( is( side entry hopper. location, open air), and( is( side entry hopper. location, ventilated compartment), loop( for each( ventilated compartment), is( count( ventilated compartment. side entry hopper), 1)), comply with( ventilated compartment, nzbc g4))))))", "if( is( hopper. type, side entry)), then( obligation( and( greater than equal( hopper. opening diameter, 250 mm), has( hopper, door), is( door, self closing), is( door, tight fitting)), has( hopper, opening), surround( wall surface, opening), is( wall surface, easily cleaned), or( and( is( wall surface. material, or( galvanised steel, ceramic tile)), is( wall surface. location, or( dwelling, stair access)), is( hopper. location, enclosed), away from( hopper. location, or( habitable space, food preparation area)), has( hopper, ventilation), is( ventilation, open air), comply with( ventilation, nzbc g4)))))"], ["translate English to LegalRuleML: B1AS3 1.7.2 Where a packer (see Figures 2, 3, 6 and 7(b)) is shown between the chimney and building it shall be: a) Concrete, brick, steel (angle, channel or Z section), or any insulating material which has a long term operating temperature of no less than 150\u00b0C, b) Secured in place to prevent it dislodging, and c) Capable of withstanding a compressive force of 10 kN without shortening by more than 1.5 mm. chimney, packer, location, building, material, concrete, brick, steel, angle, channel, z section, insulation, long term operating temperature, 150 degC, secure in place, compressive force, 10 kN, shortening, 1.5 mm", ["if( and( expression( function( in between), atom( variable( packer)), data( chimney)), expression( function( in between), atom( variable( packer)), data( building)))), then( obligation( and( or( expression( function( is), atom( relation( material), variable( packer)), data( concrete)), expression( function( is), atom( relation( material), variable( packer)), data( brick)), expression( function( is), atom( relation( material), variable( packer)), data( steel angle)), expression( function( is), atom( relation( material), variable( packer)), data( steel channel)), expression( function( is), atom( relation( material), variable( packer)), data( steel zsection)), and( expression( function( is), atom( relation( material), variable( packer)), data( insulating)), expression( function( has), atom( relation( material), variable( packer)), data( operating temperature)), expression( function( greater than equal), atom( variable( operating temperature)), data( baseunit( kind( celsius)), value( 150.0))))), expression( function( has), atom( variable( packer)), data( fixing)), expression( function( has), atom( variable( packer)), data( compressive resistance)), expression( function( is), atom( relation( force), variable( compressive resistance)), data( baseunit( prefix( kilo), kind( newton)), value( 10.0))), expression( function( less than equal), atom( relation( shortening), variable( packer)), data( baseunit( prefix( milli), kind( metre)), value( 1.5))))))"], "if( and( expression( function( has), atom( variable( chimney)), data( packer)), expression( function( in between), atom( relation( location), variable( packer)), data( chimney)), expression( function( in between), atom( relation( location), variable( packer)), data( building)))), then( obligation( and( or( expression( function( is), atom( relation( material), variable( packer)), data( concrete)), expression( function( is), atom( relation( material), variable( packer)), data( brick)), expression( function( is), atom( relation( material), variable( packer)), data( steel)), expression( function( is), atom( relation( material), variable( packer)), data( angle)), expression( function( is), atom( relation( material), variable( packer)), data( channel)), expression( function( is), atom( relation( material), variable( packer)), data( z section))), expression( function( is), atom( relation( insulation), variable( packer)), data( long term operating temperature)), expression( function( greater than equal), atom( relation( long term operating temperature), variable( insulation)), data( baseunit( kind( celsius)), value( 150.0))), expression( function( is), atom( relation( material), variable( packer)), data( secure in place)), expression( function( for), atom( relation( compressive force), variable( packer)), data( baseunit( prefix( kilo), kind( newton)), value( 10.0))), expression( function( less than equal), atom( relation( shortening), variable( packer)), data( baseunit( prefix( milli), kind( metre)), value( 1.5))))))", "if( in between( packer, and( chimney, building))), then( obligation( and( or( is( packer. material, or( concrete, brick, steel angle, steel channel, steel zsection)), and( is( packer. material, insulating), has( packer. material, operating temperature), greater than equal( operating temperature, 150 degC))), has( packer, fixing), has( packer, compressive resistance), is( compressive resistance. force, 10 kN), less than equal( packer. shortening, 1.5 mm))))", "if( and( has( chimney, packer), in between( packer. location, and( chimney, building)))), then( obligation( and( is( packer. material, or( concrete, brick, steel, angle, channel, z section)), is( packer. insulation, long term operating temperature), greater than equal( insulation. long term operating temperature, 150 degC), is( packer. material, secure in place), for( packer. compressive force, 10 kN), less than equal( packer. shortening, 1.5 mm))))"], ["translate English to LegalRuleML: B1AS3 1.7.6 Brick chimneys; Brick chimneys shall be restrained at roof level by a zinc coated 50 x 1.0 mm mild steel 'U' strap used in conjunction with closely spaced wall ties. chimney, material, brick, restraint, roof level, strap, type, u, material, mild steel, thickness, 50 mm, width, 1.0 mm, zinc coated, wall tie, spacing, close", ["if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( and( obligation( and( expression( function( has), atom( variable( chimney)), data( fixing)), expression( function( is), atom( relation( elevation), variable( fixing)), data( roof level)), expression( function( include), atom( relation( type), variable( fixing)), data( u strap)), expression( function( include), atom( relation( type), variable( fixing)), data( wall tie)), expression( function( is), atom( relation( material), variable( u strap)), data( mild steel)), expression( function( is), atom( relation( type), variable( u strap)), data( zinc coated)), expression( function( equal), atom( relation( length), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( depth), variable( u strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close))))))"], "if( expression( function( is), atom( relation( material), variable( chimney)), data( brick))), then( obligation( and( expression( function( has), atom( variable( chimney)), data( restraint)), expression( function( is), atom( relation( type), variable( restraint)), data( u)), expression( function( is), atom( relation( material), variable( restraint)), data( mild steel)), expression( function( equal), atom( relation( thickness), variable( strap)), data( baseunit( prefix( milli), kind( metre)), value( 50.0))), expression( function( equal), atom( relation( width), variable( strap)), data( baseunit( prefix( milli), kind( metre)), value( 1.0))), expression( function( is), atom( relation( material), variable( strap)), data( zinc coated)), expression( function( has), atom( variable( chimney)), data( wall tie)), expression( function( is), atom( relation( spacing), variable( wall tie)), data( close)))))", "if( is( chimney. material, brick)), then( and( obligation( and( has( chimney, fixing), is( fixing. elevation, roof level), include( fixing. type, and( u strap, wall tie)), is( u strap. material, mild steel), is( u strap. type, zinc coated), equal( u strap. length, 50 mm), equal( u strap. depth, 1 mm), is( wall tie. spacing, close)))))", "if( is( chimney. material, brick)), then( obligation( and( has( chimney, restraint), is( restraint. type, u), is( restraint. material, mild steel), equal( strap. thickness, 50 mm), equal( strap. width, 1.0 mm), is( strap. material, zinc coated), has( chimney, wall tie), is( wall tie. spacing, close))))"], ["translate English to LegalRuleML: B1AS3 1.2.1 Chimney wall thicknesses shall be no less than: Precast pumice concrete 85 mm. chimney, material, precast pumice concrete, wall, thickness, 85 mm", ["if( expression( function( is), atom( relation( material), variable( chimney)), data( precast pumice concrete))), then( obligation( and( expression( function( has), atom( variable( chimney)), data( wall)), expression( function( greater than equal), atom( relation( thickness), variable( wall)), data( baseunit( prefix( milli), kind( metre)), value( 85.0))))))"], "if( expression( function( is), atom( relation( material), variable( chimney)), data( precast pumice concrete))), then( obligation( and( expression( function( has), atom( variable( chimney)), data( wall)), expression( function( greater than equal), atom( relation( thickness), variable( wall)), data( baseunit( prefix( milli), kind( metre)), value( 85.0))))))", "if( is( chimney. material, precast pumice concrete)), then( obligation( and( has( chimney, wall), greater than equal( wall. thickness, 85 mm))))", "if( is( chimney. material, precast pumice concrete)), then( obligation( and( has( chimney, wall), greater than equal( wall. thickness, 85 mm))))"], ["translate English to LegalRuleML: G15AS1 3.1.1 NZS 4304 Section 6.2 is another Acceptable Solution for storage areas, but may exceed the performance criteria of NZBC G15. storage area, nzs 4304 6.2, performance criteria, nzbc g15", ["if( expression( function( exist), atom( variable( waste storage area)))), then( permission( expression( function( comply with), atom( variable( waste storage area)), data( 'nzs 4304 6.2'))))"], "if( expression( function( comply with), atom( variable( storage area)), data( nzs 4304 6.2))), then( permission( expression( function( comply with), atom( relation( performance criteria), variable( storage area)), data( nzbc g15))))", "if( exist( waste storage area)), then( permission( comply with( waste storage area, 'nzs 4304 6.2')))", "if( comply with( storage area, nzs 4304 6.2)), then( permission( comply with( storage area. performance criteria, nzbc g15)))"], ["translate English to LegalRuleML: B1AS3 The bracing units required as determined from Paragraph 1.9.3 shall be provided solely by that wall. wall, bracing unit, nzbc b1as3 1.9.3", ["if( expression( function( as per), atom( relation( unit), variable( bracing)), data( nzbc b1as3 1.9.3))), then( obligation( expression( function( by), atom( relation( unit), variable( bracing)), data( wall))))"], "if( expression( function( requires), atom( variable( wall)), data( bracing unit))), then( obligation( expression( function( as per), atom( variable( bracing unit)), data( nzbc b1as3 1.9.3))))", "if( as per( bracing. unit, nzbc b1as3 1.9.3)), then( obligation( by( bracing. unit, wall)))", "if( requires( wall, bracing unit)), then( obligation( as per( bracing unit, nzbc b1as3 1.9.3)))"], ["translate English to LegalRuleML: B1AS3 Fixing ties shall be located in mortar joints between the units. tie, type, fixing, location, mortar joint, unit", ["if( expression( function( is), atom( relation( type), variable( tie)), data( fixing))), then( obligation( and( expression( function( within), atom( relation( location), variable( tie)), data( mortar joint)), expression( function( in between), atom( relation( location), variable( mortar joint)), data( units)))))"], "if( expression( function( is), atom( relation( type), variable( tie)), data( fixing))), then( obligation( and( expression( function( within), atom( relation( location), variable( tie)), data( mortar joint)), expression( function( in between), atom( relation( location), variable( mortar joint)), data( units)))))", "if( is( tie. type, fixing)), then( obligation( and( within( tie. location, mortar joint), in between( mortar joint. location, units))))", "if( is( tie. type, fixing)), then( obligation( and( within( tie. location, mortar joint), in between( mortar joint. location, units))))"], ["translate English to LegalRuleML: B1AS3 Reinforcing used in chimneys is to conform to AS/NZS 4671. chimney, reinforcing, nzs 4671", ["if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))"], "if( expression( function( has), atom( variable( chimney)), data( reinforcing))), then( obligation( expression( function( comply with), atom( variable( reinforcing)), data( nzs 4671))))", "if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))", "if( has( chimney, reinforcing)), then( obligation( comply with( reinforcing, nzs 4671)))"], ["translate English to LegalRuleML: G1AS1 1.1.1 Sanitary facilities are required in occupied buildings. building, occupation, sanitation facility", ["if( expression( function( has), atom( variable( building)), data( occupancy))), then( expression( function( has), atom( variable( building)), data( sanitary facilities)))"], "if( expression( function( is), atom( relation( occupation), variable( building)))), then( obligation( expression( function( has), atom( variable( building)), data( sanitation facility))))", "if( has( building, occupancy)), then( has( building, sanitary facilities))", "if( is( building. occupation), then( obligation( has( building, sanitation facility)))"], ["translate English to LegalRuleML: E3AS1 R-values for walls, roofs and ceilings shall be no less than: For light timber frame wall or other framed wall constructions with cavities, 1.5. wall, roof, ceiling, construction, light timber frame wall, framed wall, cavity, r value, 1.5", ["if( or( expression( function( is), atom( relation( type), variable( wall)), data( light timber framing)), expression( function( is), atom( relation( type), variable( wall)), data( framing with cavities)))), then( obligation( expression( function( greater than equal), atom( relation( r value), variable( wall)), data( 1.5))))"], "if( or( expression( function( is), atom( relation( type), variable( wall)), data( roof)), expression( function( is), atom( relation( type), variable( wall)), data( ceiling)), expression( function( is), atom( relation( construction), variable( wall)), data( light timber frame wall)), expression( function( is), atom( relation( construction), variable( wall)), data( framed wall)), expression( function( has), atom( variable( framed wall)), data( cavity)))), then( obligation( and( expression( function( greater than equal), atom( relation( r value), variable( wall)), data( 1.5)), expression( function( greater than equal), atom( relation( r value), variable( ceiling)), data( 1.5)))))", "if( is( wall. type, or( light timber framing, framing with cavities))), then( obligation( greater than equal( wall. r value, 1.5)))", "if( or( is( wall. type, or( roof, ceiling)), is( wall. construction, or( light timber frame wall, framed wall)), has( framed wall, cavity))), then( obligation( and( greater than equal( wall. r value, 1.5), greater than equal( ceiling. r value, 1.5))))"], ["translate English to LegalRuleML: E3AS1 R-values for walls, roofs and ceilings shall be no less than: For single skin normal weight masonry based wall construction without a cavity, 0.6. wall, roof, ceiling, type, single skin, masonry base, cavity, r value, 0.6", ["if( and( expression( function( is), atom( relation( material), variable( wall)), data( masonry)), expression( function( is), atom( relation( type), variable( masonry)), data( single skin)), expression( function( is), atom( relation( type), variable( masonry)), data( normal weight)), expression( function( is), atom( relation( type), variable( wall)), data( without cavity)))), then( obligation( expression( function( greater than equal), atom( relation( r value), variable( wall)), data( 0.6))))"], "if( and( or( expression( function( for), atom( variable( wall)), data( roof)), expression( function( for), atom( variable( wall)), data( ceiling))), expression( function( is), atom( relation( type), variable( wall)), data( single skin)), expression( function( is), atom( relation( type), variable( wall)), data( masonry base)), not( expression( function( has), atom( variable( masonry base)), data( cavity))))), then( obligation( and( expression( function( greater than equal), atom( relation( r value), variable( wall)), data( 0.6)))))", "if( and( is( wall. material, masonry), is( masonry. type, and( single skin, normal weight)), is( wall. type, without cavity))), then( obligation( greater than equal( wall. r value, 0.6)))", "if( and( for( wall, or( roof, ceiling)), is( wall. type, single skin), is( wall. type, masonry base), not( has( masonry base, cavity)))), then( obligation( and( greater than equal( wall. r value, 0.6))))"], ["translate English to LegalRuleML: E3AS1 R-values for walls, roofs and ceilings shall be no less than: For solid timber wall systems no less than 60 mm thick, 0.6. wall, system, material, solid timber, thickness, 60 mm, r value, 0.6", ["if( or( expression( function( is), atom( relation( material), variable( wall)), data( timber)), expression( function( is), atom( relation( type), variable( timber)), data( solid)), expression( function( greater than equal), atom( relation( thickness), variable( wall)), data( baseunit( prefix( milli), kind( metre)), value( 60.0))))), then( obligation( expression( function( greater than equal), atom( relation( r value), variable( wall)), data( 0.6))))"], "if( and( expression( function( is), atom( relation( system), variable( wall)), data( material)), expression( function( is), atom( relation( material), variable( wall)), data( solid timber)))), then( obligation( and( expression( function( greater than equal), atom( relation( thickness), variable( wall)), data( baseunit( prefix( milli), kind( metre)), value( 60.0))), expression( function( greater than equal), atom( relation( r value), variable( wall)), data( 0.6)))))", "if( or( is( wall. material, timber), is( timber. type, solid), greater than equal( wall. thickness, 60 mm))), then( obligation( greater than equal( wall. r value, 0.6)))", "if( and( is( wall. system, material), is( wall. material, solid timber))), then( obligation( and( greater than equal( wall. thickness, 60 mm), greater than equal( wall. r value, 0.6))))"], ["translate English to LegalRuleML: G14VM1 3.2.1 Free-standing tanks shall be secured against earthquake forces. The methods given in NZS 4219 are acceptable. tank, type, free standing, secured, earthquake force, nzs 4219", ["if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( and( obligation( expression( function( has), atom( variable( tank)), data( seismic resistance))), permission( expression( function( as per), atom( relation( seismic resistance), variable( tank)), data( nzs 4219)))))"], "if( expression( function( is), atom( relation( type), variable( tank)), data( free standing))), then( obligation( and( expression( function( is), atom( variable( tank)), data( secured)), expression( function( against), atom( variable( secured)), data( earthquake force)), expression( function( comply with), atom( variable( secured)), data( nzs 4219)))))", "if( is( tank. type, free standing)), then( and( obligation( has( tank, seismic resistance)), permission( as per( tank. seismic resistance, nzs 4219))))", "if( is( tank. type, free standing)), then( obligation( and( is( tank, secured), against( secured, earthquake force), comply with( secured, nzs 4219))))"], ["translate English to LegalRuleML: G14VM1 1.4.1 Storage facilities shall be located: a) In areas that will not create health or safety hazards. storage facility, location, health hazard, safety hazard", ["if( expression( function( exist), atom( variable( storage facility)))), then( or( obligation( not( expression( function( cause), atom( relation( location), variable( storage facility)), data( health hazard)))), obligation( not( expression( function( cause), atom( relation( location), variable( storage facility)), data( safety hazard))))))"], "if( expression( function( exist), atom( variable( storage facility)))), then( or( obligation( not( expression( function( cause), atom( relation( location), variable( storage facility)), data( health hazard)))), obligation( not( expression( function( cause), atom( relation( location), variable( storage facility)), data( safety hazard))))))", "if( exist( storage facility)), then( obligation( not( cause( storage facility. location, or( health hazard, safety hazard)))))", "if( exist( storage facility)), then( obligation( not( cause( storage facility. location, or( health hazard, safety hazard)))))"], ["translate English to LegalRuleML: G14VM1 1.4.1 Storage facilities shall be located: To ensure that spillage from storage tanks or ponds can be safely contained. storage facility, location, spillage containment", ["if( expression( function( exist), atom( variable( storage facility)))), then( obligation( expression( function( has), atom( relation( location), variable( storage facility)), data( spillage containment))))"], "if( expression( function( exist), atom( variable( storage facility)))), then( obligation( expression( function( has), atom( relation( location), variable( storage facility)), data( spillage containment))))", "if( exist( storage facility)), then( obligation( has( storage facility. location, spillage containment)))", "if( exist( storage facility)), then( obligation( has( storage facility. location, spillage containment)))"], ["translate English to LegalRuleML: E2AS1 Flashing materials shall take into account the following factors: a) The requirements of NZBC Clause B2 Durability, b) The environment where the building is located, c) The specific conditions of use, and d) Consideration of the surrounding materials. flashing, material, nzbc b2, durability, environment, specific condition, use, consideration, surrounding material", ["if( expression( function( exist), atom( variable( flashing)))), then( obligation( and( expression( function( comply with), atom( relation( material), variable( flashing)), data( nzbc b2)), expression( function( as per), atom( relation( material), variable( flashing)), data( building environment)), expression( function( as per), atom( relation( material), variable( flashing)), data( condition of use)), expression( function( as per), atom( relation( material), variable( flashing)), data( surrounding material)))))"], "if( expression( function( exist), atom( variable( flashing)))), then( obligation( and( expression( function( comply with), atom( relation( material), variable( flashing)), data( nzbc b2)), expression( function( define), atom( relation( durability), variable( flashing)), data( x0)), expression( function( has), atom( relation( environment), variable( building)), data( specific condition)), expression( function( has), atom( relation( use), variable( flashing)), data( specific condition)), expression( function( has), atom( variable( surrounding material)), data( consideration)))))", "if( exist( flashing)), then( obligation( and( comply with( flashing. material, nzbc b2), as per( flashing. material, and( building environment, condition of use, surrounding material)))))", "if( exist( flashing)), then( obligation( and( comply with( flashing. material, nzbc b2), define( flashing. durability, x0), has( building. environment, specific condition), has( flashing. use, specific condition), has( surrounding material, consideration))))"], ["translate English to LegalRuleML: E2AS1 Table 1 sets out the definitions of risk levels relating to the location and design features of the building. building, location, design feature, risk level, nzbc e2as1 t1", ["if( or( expression( function( has), atom( variable( building)), data( location)), expression( function( has), atom( variable( building)), data( design feature)))), then( and( expression( function( for), atom( variable( risk level)), data( location)), expression( function( for), atom( variable( risk level)), data( design feature)), expression( function( as per), atom( relation( definition), variable( risk level)), data( nzbc e2as1 t1))))"], "if( or( expression( function( has), atom( variable( building)), data( location)), expression( function( has), atom( variable( building)), data( design feature)))), then( and( expression( function( apply to), atom( variable( risk level)), data( nzbc e2as1 t1))))", "if( has( building, or( location, design feature))), then( and( for( risk level, and( location, design feature)), as per( risk level. definition, nzbc e2as1 t1)))", "if( has( building, or( location, design feature))), then( and( apply to( risk level, nzbc e2as1 t1)))"], ["translate English to LegalRuleML: G12AS2 3.0 Solar Water Heater Requirements; For protection from freezing, collectors installed in climate zones 1 and 2 (as shown in Figure 1) must: pass the level 1 test described in AS/NZS 2712 Appendix E, or have an automatic drain-down system. solar collector, location, climate zone 1, 2 ( nzs 2712 appendix e) level 1 test, automatic draindown system", ["if( or( expression( function( is), atom( relation( location), variable( solar collector)), data( climate zone 1)), expression( function( is), atom( relation( location), variable( solar collector)), data( climate zone 2)))), then( obligation( or( and( expression( function( test), atom( variable( solar collector)), data( level 1 test)), expression( function( as per), atom( variable( level 1 test)), data( nzs 2712 appendix e))), expression( function( has), atom( variable( solar collector)), data( automatic draindown system)))))"], "if( or( expression( function( is), atom( relation( location), variable( solar collector)), data( climate zone 1)), expression( function( is), atom( relation( location), variable( solar collector)), data( 2)))), then( obligation( or( and( expression( function( test), atom( variable( solar collector)), data( level 1 test)), expression( function( as per), atom( variable( level 1 test)), data( nzs 2712 appendix e))), expression( function( has), atom( variable( solar collector)), data( automatic draindown system)))))", "if( is( solar collector. location, or( climate zone 1, climate zone 2))), then( obligation( or( and( test( solar collector, level 1 test), as per( level 1 test, nzs 2712 appendix e)), has( solar collector, automatic draindown system))))", "if( is( solar collector. location, or( climate zone 1, 2))), then( obligation( or( and( test( solar collector, level 1 test), as per( level 1 test, nzs 2712 appendix e)), has( solar collector, automatic draindown system))))"], ["translate English to LegalRuleML: E2AS1 Flashing edges, with hooks, hems, kick-outs and bird's beaks shall be as required in Table 7 and Paragraph 4.5.1. flashing edge, hook, hem, kick out, bird beak, nzbc e2as1 t7, nzbc e2-as1 4.5.1", ["if( or( expression( function( has), atom( relation( edge), variable( flashing)), data( hook)), expression( function( has), atom( relation( edge), variable( flashing)), data( hem)), expression( function( has), atom( relation( edge), variable( flashing)), data( kick out)), expression( function( has), atom( relation( edge), variable( flashing)), data( bird beak)))), then( and( obligation( expression( function( as per), atom( relation( edge), variable( flashing)), data( nzbc e2as1 t7))), obligation( expression( function( as per), atom( relation( edge), variable( flashing)), data( nzbc e2as1 4.5.1)))))"], "if( and( or( expression( function( has), atom( variable( flashing edge)), data( hook)), expression( function( has), atom( variable( flashing edge)), data( hem)), expression( function( has), atom( variable( flashing edge)), data( kick out))), expression( function( has), atom( variable( bird beak)), data( flashing edge)))), then( and( obligation( expression( function( as per), atom( variable( flashing edge)), data( nzbc e2as1 t7))), obligation( expression( function( as per), atom( variable( flashing edge)), data( nzbc e2-as1 4.5.1)))))", "if( has( flashing. edge, or( hook, hem, kick out, bird beak))), then( obligation( as per( flashing. edge, and( nzbc e2as1 t7, nzbc e2as1 4.5.1))))", "if( and( has( flashing edge, or( hook, hem, kick out)), has( bird beak, flashing edge))), then( obligation( as per( flashing edge, and( nzbc e2as1 t7, nzbc e2-as1 4.5.1))))"], ["translate English to LegalRuleML: E2AS1 Apron flashing cover over metal roofing: Parallel flashing: The apron shall: i) be dimensioned to suit the roof cladding profile,. flashing, type, apron, metal roofing, parallel, cladding profile, dimension, nzbc e2as1", ["if( and( expression( function( is), atom( relation( type), variable( flashing)), data( apron)), expression( function( above), atom( variable( flashing)), data( metal roofing)), expression( function( is), atom( variable( flashing)), data( parallel)))), then( obligation( and( expression( function( has), atom( relation( roof cladding), variable( metal roofing)), data( profile)), expression( function( as per), atom( relation( dimension), variable( flashing)), data( profile)))))"], "if( and( expression( function( is), atom( relation( type), variable( flashing)), data( apron)), expression( function( above), atom( variable( flashing)), data( metal roofing)), expression( function( is), atom( variable( flashing)), data( parallel)), expression( function( has), atom( variable( metal roofing)), data( cladding profile)), expression( function( towards), atom( relation( dimension), variable( flashing)), data( cladding profile)))), then( obligation( expression( function( comply with), atom( relation( dimension), variable( flashing)), data( nzbc e2as1))))", "if( and( is( flashing. type, apron), above( flashing, metal roofing), is( flashing, parallel))), then( obligation( and( has( metal roofing. roof cladding, profile), as per( flashing. dimension, profile))))", "if( and( is( flashing. type, apron), above( flashing, metal roofing), is( flashing, parallel), has( metal roofing, cladding profile), towards( flashing. dimension, cladding profile))), then( obligation( comply with( flashing. dimension, nzbc e2as1)))"], ["translate English to LegalRuleML: E2AS1 Overlap with roof claddings: Apron flashing cover over metal roofing: Parallel flashing: The apron shall: iii) for profiled metal roof cladding, overhang flashing a minimum 10 mm clear of crest and maximum 5 mm clear of trough as shown in Figure 47. flashing, type, apron, metal roofing, parallel, type, profiled metal, overhang, crest, clearance, '10 mm', trough, nzbc e2as1 f47", ["if( and( expression( function( is), atom( relation( type), variable( flashing)), data( apron)), expression( function( above), atom( variable( flashing)), data( metal roofing)), expression( function( is), atom( variable( flashing)), data( parallel)), expression( function( has), atom( variable( metal roofing)), data( cladding)), expression( function( is), atom( relation( material), variable( cladding)), data( profiled metal)))), then( obligation( and( expression( function( has), atom( variable( cladding)), data( crest)), expression( function( towards), atom( relation( clearance), variable( flashing)), data( crest)), expression( function( greater than equal), atom( relation( clearance), variable( flashing)), data( baseunit( prefix( milli), kind( metre)), value( 10.0))), expression( function( has), atom( variable( cladding)), data( trough)), expression( function( towards), atom( relation( clearance), variable( flashing)), data( trough)), expression( function( less than equal), atom( relation( clearance), variable( flashing)), data( baseunit( prefix( milli), kind( metre)), value( 5.0))), expression( function( as per), atom( variable( clearance)), data( nzbc e2as1 f47)))))"], "if( and( expression( function( is), atom( relation( type), variable( flashing)), data( apron)), expression( function( above), atom( variable( flashing)), data( metal roofing)), expression( function( is), atom( variable( flashing)), data( parallel)), expression( function( is), atom( relation( type), variable( flashing)), data( profiled metal)))), then( obligation( and( expression( function( has), atom( variable( metal roofing)), data( overhang)), expression( function( has), atom( variable( flashing)), data( crest)), expression( function( define), atom( relation( clearance), variable( crest)), data( x0)), expression( function( greater than equal), atom( relation( clearance), variable( overhang)), data( '10 mm')), expression( function( has), atom( variable( flashing)), data( trough)), expression( function( as per), atom( relation( clearance), variable( overhang)), data( nzbc e2as1 f47)))))", "if( and( is( flashing. type, apron), above( flashing, metal roofing), is( flashing, parallel), has( metal roofing, cladding), is( cladding. material, profiled metal))), then( obligation( and( has( cladding, crest), towards( flashing. clearance, crest), greater than equal( flashing. clearance, 10 mm), has( cladding, trough), towards( flashing. clearance, trough), less than equal( flashing. clearance, 5 mm), as per( clearance, nzbc e2as1 f47))))", "if( and( is( flashing. type, apron), above( flashing, metal roofing), is( flashing, parallel), is( flashing. type, profiled metal))), then( obligation( and( has( metal roofing, overhang), has( flashing, crest), define( crest. clearance, x0), greater than equal( overhang. clearance, '10 mm'), has( flashing, trough), as per( overhang. clearance, nzbc e2as1 f47))))"], ["translate English to LegalRuleML: E2AS1 The apron cover over the roof cladding shall be in accordance with Table 7. roof cladding, cover, apron, nzbc e2as1 t7", ["if( and( expression( function( above), atom( variable( cover)), data( cladding)), expression( function( is), atom( relation( type), variable( cover)), data( apron)))), then( obligation( expression( function( as per), atom( variable( cover)), data( nzbc e2as1 t7))))"], "if( expression( function( above), atom( variable( cover)), data( roof cladding))), then( obligation( and( expression( function( is), atom( relation( type), variable( cover)), data( apron)), expression( function( as per), atom( variable( cover)), data( nzbc e2as1 t7)))))", "if( and( above( cover, cladding), is( cover. type, apron))), then( obligation( as per( cover, nzbc e2as1 t7)))", "if( above( cover, roof cladding)), then( obligation( and( is( cover. type, apron), as per( cover, nzbc e2as1 t7))))"], ["translate English to LegalRuleML: E2AS1 For Low, Medium, High and Very High wind zones, flashing upstands shall have either: 1) A hem or hook to Figure 5, with upstand dimensions as shown throughout the document, or 2) No hooks or hems, and flashing upstand dimensions increased by 25 mm beyond those shown. flashing, upstand, wind zone, low, medium, high, very high, hem, nzbc e2as1 f5, dimension, nzbc e2,as1 f2, hook, nzbc e2-as1 f2, hem, dimension, 'x0 + 25 mm'", ["if( and( or( expression( function( is), atom( relation( type), variable( wind zone)), data( low)), expression( function( is), atom( relation( type), variable( wind zone)), data( medium)), expression( function( is), atom( relation( type), variable( wind zone)), data( high)), expression( function( is), atom( relation( type), variable( wind zone)), data( very high))), expression( function( has), atom( variable( flashing)), data( upstand)))), then( obligation( or( and( or( expression( function( has), atom( variable( upstand)), data( hem)), expression( function( has), atom( variable( upstand)), data( hook))), expression( function( as per), atom( variable( hem)), data( nzbc e2as1 f5)), expression( function( as per), atom( variable( hook)), data( nzbc e2as1 f5)), expression( function( as per), atom( relation( dimension), variable( upstand)), data( nzbc e2as1))), and( not( expression( function( has), atom( variable( upstand)), data( hem))), not( expression( function( has), atom( variable( upstand)), data( hook))), expression( function( greater than equal), atom( relation( dimension), variable( upstand)), data( 'value + 25 mm')), expression( function( as per), atom( variable( value)), data( nzbc e2as1))))))"], "if( and( expression( function( has), atom( variable( flashing)), data( upstand)), or( expression( function( is), atom( relation( wind zone), variable( upstand)), data( low)), expression( function( is), atom( relation( wind zone), variable( upstand)), data( medium)), expression( function( is), atom( relation( wind zone), variable( upstand)), data( high)), expression( function( is), atom( relation( wind zone), variable( upstand)), data( very high))))), then( obligation( or( and( or( expression( function( has), atom( variable( upstand)), data( hem)), expression( function( has), atom( variable( upstand)), data( hook))), expression( function( as per), atom( variable( hem)), data( nzbc e2as1 f5)), expression( function( as per), atom( relation( dimension), variable( upstand)), data( document)), or( not( expression( function( has), atom( variable( upstand)), data( hook))), not( expression( function( has), atom( variable( upstand)), data( hem)))), expression( function( greater than equal), atom( relation( dimension), variable( upstand)), data( 'x0 + 25 mm'))))))", "if( and( is( wind zone. type, or( low, medium, high, very high)), has( flashing, upstand))), then( obligation( or( and( has( upstand, or( hem, hook)), as per( hem, nzbc e2as1 f5), as per( hook, nzbc e2as1 f5), as per( upstand. dimension, nzbc e2as1)), and( not( has( upstand, and( hem, hook))), greater than equal( upstand. dimension, 'value + 25 mm'), as per( value, nzbc e2as1)))))", "if( and( has( flashing, upstand), is( upstand. wind zone, or( low, medium, high, very high)))), then( obligation( or( and( has( upstand, or( hem, hook)), as per( hem, nzbc e2as1 f5), as per( upstand. dimension, document), not( has( upstand, or( hook, hem))), greater than equal( upstand. dimension, 'x0 + 25 mm'))))"], ["translate English to LegalRuleML: E2AS1 8.4 Profiled Metal Roof Cladding; Materials for the manufacture of profiled steel roof cladding shall: a) have a BMT of 0.4 mm minimum b) be grade G550, or G300 for rolled, crimped, or trough profile roofing c) be selected for corrosion protection according to the intended exposure zone as shown in Table 20. roof cladding, type, profiled metal, material, profiled steel, base metal thickness, 0.4 mm, grade, g550, g300, type, rolled, crimped, trough, corrosion protection, intended exposure zone, nzbc e2as1 t20", ["if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( roof cladding)), data( steel)))), then( obligation( and( expression( function( greater than equal), atom( relation( base metal thickness), variable( steel)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), or( and( expression( function( is), atom( relation( grade), variable( steel)), data( g550)), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped))), not( expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough)))), and( expression( function( is), atom( relation( grade), variable( steel)), data( g300)), or( expression( function( is), atom( relation( profile), variable( roof cladding)), data( rolled)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( crimped)), expression( function( is), atom( relation( profile), variable( roof cladding)), data( trough))))), expression( function( for), atom( relation( corrosion protection), variable( steel)), data( exposure zone)), expression( function( as per), atom( variable( exposure zone)), data( nzbc e2as1 t20)))))"], "if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( is), atom( relation( material), variable( roof cladding)), data( profiled steel)))), then( obligation( and( expression( function( greater than equal), atom( variable( profiled metal thickness)), data( baseunit( prefix( milli), kind( metre)), value( 0.4))), or( expression( function( equal), atom( variable( profiled metal thickness)), data( grade)), expression( function( is), atom( variable( grade)), data( g550)), expression( function( is), atom( variable( grade)), data( g300)), expression( function( is), atom( relation( type), variable( profiled metal)), data( rolled)), expression( function( is), atom( relation( type), variable( profiled metal)), data( crimped)), expression( function( is), atom( relation( type), variable( profiled metal)), data( trough))), expression( function( as per), atom( relation( corrosion protection), variable( profiled metal)), data( intended exposure zone)), expression( function( as per), atom( variable( exposed exposure zone)), data( nzbc e2as1 t20)))))", "if( and( is( roof cladding. type, profiled metal), is( roof cladding. material, steel))), then( obligation( and( greater than equal( steel. base metal thickness, 0.4 mm), or( and( is( steel. grade, g550), not( is( roof cladding. profile, and( rolled, crimped, trough)))), and( is( steel. grade, g300), is( roof cladding. profile, or( rolled, crimped, trough)))), for( steel. corrosion protection, exposure zone), as per( exposure zone, nzbc e2as1 t20))))", "if( and( is( roof cladding. type, profiled metal), is( roof cladding. material, profiled steel))), then( obligation( and( greater than equal( profiled metal thickness, 0.4 mm), or( equal( profiled metal thickness, grade), is( grade, or( g550, g300)), is( profiled metal. type, or( rolled, crimped, trough))), as per( profiled metal. corrosion protection, intended exposure zone), as per( exposed exposure zone, nzbc e2as1 t20))))"], ["translate English to LegalRuleML: E2AS1 Where end-laps are required in flashings, form these as shown in Figure 6 and, before joining the two parts, apply an 8 mm diameter bead of neutral cure sealant complying with: i) Type F, Class 20LM or 25LM of ISO 11600, or ii) low modulus Type II Class A of Federal Specification TT-S-00230C. flashing, end lap, nzbc e2as1 f6, join, sealant, neutral cure, type f, nzbc iso 11600 class 20lm, nzbc iso11600 class 25lm, nzbc tts 00230c low modulus type ii class a", ["if( expression( function( requires), atom( variable( flashing)), data( end lap))), then( obligation( and( expression( function( as per), atom( variable( end lap)), data( nzbc e2as1 f6)), expression( function( before), atom( relation( join), variable( end lap)), data( flashing)), expression( function( has), atom( relation( join), variable( end lap)), data( bead)), expression( function( equal), atom( relation( diameter), variable( bead)), data( baseunit( prefix( milli), kind( metre)), value( 8.0))), expression( function( is), atom( variable( bead)), data( sealant)), expression( function( is), atom( relation( type), variable( sealant)), data( neutral cure)), or( expression( function( comply with), atom( variable( sealant)), data( iso 11600 class 20lm type f)), expression( function( comply with), atom( variable( sealant)), data( iso 11600 class 25lm type f)), expression( function( comply with), atom( variable( sealant)), data( tts 00230c class a low modulus type 2))))))"], "if( expression( function( requires), atom( variable( flashing)), data( end lap))), then( obligation( and( expression( function( as per), atom( relation( end lap), variable( flashing)), data( nzbc e2as1 f6)), expression( function( join), atom( relation( end lap), variable( flashing)), data( part)), expression( function( apply), atom( relation( join), variable( flashing)), data( sealant)), or( expression( function( is), atom( relation( type f), variable( sealant)), data( nzbc iso 11600 class 20lm)), expression( function( is), atom( relation( type f), variable( sealant)), data( nzbc iso11600 class 25lm)), expression( function( is), atom( relation( type f), variable( sealant)), data( nzbc tts 00230c low modulus type ii class a))))))", "if( requires( flashing, end lap)), then( obligation( and( as per( end lap, nzbc e2as1 f6), before( end lap. join, flashing), has( end lap. join, bead), equal( bead. diameter, 8 mm), is( bead, sealant), is( sealant. type, neutral cure), comply with( sealant, or( iso 11600 class 20lm type f, iso 11600 class 25lm type f, tts 00230c class a low modulus type 2)))))", "if( requires( flashing, end lap)), then( obligation( and( as per( flashing. end lap, nzbc e2as1 f6), join( flashing. end lap, part), apply( flashing. join, sealant), is( sealant. type f, or( nzbc iso 11600 class 20lm, nzbc iso11600 class 25lm, nzbc tts 00230c low modulus type ii class a)))))"], ["translate English to LegalRuleML: E2AS1 8.4 Profiled Metal Roof Cladding; The edge of roofing penetrations over 200 mm wide shall be supported in either direction with additional framing as shown in Figure 21. roof cladding, type, profiled metal, penetration, width, 200 mm, edge, direction, support, framing, nzbc e2as1 f21", ["if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( penetration)), expression( function( greater than), atom( relation( width), variable( penetration)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))))), then( obligation( and( expression( function( has), atom( variable( penetration)), data( edge)), expression( rulestatement( expression( function( for each), atom( relation( direction), variable( edge)))), appliedstatement( expression( function( is), atom( relation( support), variable( edge)), data( framing)))), expression( function( as per), atom( variable( framing)), data( nzbc e2as1 f21)))))"], "if( and( expression( function( is), atom( relation( type), variable( roof cladding)), data( profiled metal)), expression( function( has), atom( variable( roof cladding)), data( penetration)), expression( function( greater than), atom( relation( width), variable( penetration)), data( baseunit( prefix( milli), kind( metre)), value( 200.0))))), then( obligation( and( expression( function( has), atom( variable( penetration)), data( edge)), expression( rulestatement( expression( function( for each), atom( relation( direction), variable( edge)))), appliedstatement( expression( function( is), atom( relation( support), variable( edge)), data( framing)))), expression( function( as per), atom( variable( framing)), data( nzbc e2as1 f21)))))", "if( and( is( roof cladding. type, profiled metal), has( roof cladding, penetration), greater than( penetration. width, 200 mm))), then( obligation( and( has( penetration, edge), loop( for each( edge. direction), is( edge. support, framing)), as per( framing, nzbc e2as1 f21))))", "if( and( is( roof cladding. type, profiled metal), has( roof cladding, penetration), greater than( penetration. width, 200 mm))), then( obligation( and( has( penetration, edge), loop( for each( edge. direction), is( edge. support, framing)), as per( framing, nzbc e2as1 f21))))"], ["translate English to LegalRuleML: E2AS1 Plywood substrates shall be fixed according to the following requirements: a) Panels shall be laid with staggered joints (brick bond), b) Panels shall be laid with the face grain at right angles to the main supports, c) Supports in b) shall be at 400 mm maximum centres, d) The edge of sheets shall be supported with dwangs or framing. plywood, substrate, fixing, panel, joint, staggered, brick bond, face grain, angle, main support, support, location, 400 mmCentres, edge, support, dwang, framing", ["if( expression( function( is), atom( relation( material), variable( substrate)), data( plywood))), then( obligation( and( expression( function( has), atom( variable( substrate)), data( pannel)), or( expression( function( is), atom( relation( arrangement), variable( pannel)), data( staggered joint)), expression( function( is), atom( relation( arrangement), variable( pannel)), data( brick bond))), expression( function( has), atom( relation( face grain), variable( pannel)), data( angle)), expression( function( towards), atom( variable( angle)), data( support)), expression( function( is), atom( relation( type), variable( support)), data( main)), expression( function( less than equal), atom( relation( location), variable( support)), data( 400 mmCentres)), or( expression( function( has), atom( relation( edge), variable( pannel)), data( dwang)), expression( function( has), atom( relation( edge), variable( pannel)), data( framing))))))"], "if( expression( function( exist), atom( variable( plywood)))), then( obligation( and( expression( function( has), atom( variable( plywood)), data( substrate)), expression( function( has), atom( variable( substrate)), data( fixing)), expression( function( is), atom( relation( type), variable( fixing)), data( panel)), or( expression( function( is), atom( relation( joint), variable( panel)), data( staggered)), expression( function( is), atom( relation( joint), variable( panel)), data( brick bond))), expression( function( has), atom( variable( panel)), data( face grain)), expression( function( in between), atom( variable( angle)), data( main support)), expression( function( in between), atom( variable( angle)), data( face grain)), expression( function( define), atom( relation( location), variable( main support)), data( 400 mmCentres)), expression( function( has), atom( relation( edge), variable( sheet)), data( support)), or( expression( function( is), atom( relation( type), variable( support)), data( dwang)), expression( function( is), atom( relation( type), variable( support)), data( framing))))))", "if( is( substrate. material, plywood)), then( obligation( and( has( substrate, pannel), is( pannel. arrangement, or( staggered joint, brick bond)), has( pannel. face grain, angle), towards( angle, support), is( support. type, main), less than equal( support. location, 400 mmCentres), has( pannel. edge, or( dwang, framing)))))", "if( exist( plywood)), then( obligation( and( has( plywood, substrate), has( substrate, fixing), is( fixing. type, panel), is( panel. joint, or( staggered, brick bond)), has( panel, face grain), in between( angle, and( main support, face grain)), define( main support. location, 400 mmCentres), has( sheet. edge, support), is( support. type, or( dwang, framing)))))"], ["translate English to LegalRuleML: E2AS1 9.0 Wall claddings; Masonry veneer shall be attached to wall framing by wall ties. Wall ties and their spacings and embedment shall be in accordance with the requirements of NZS 4210 and Tables 18A, 18B and 18C. Screw fixings shall be minimum 12 gauge, 35 mm long hex washer face, galvanised or stainless steel to suit the ties required under Table 18C. wall cladding, material, masonry veneer, wall tie, spacing, nzs 4210, nzs 4210 t18, a, b, c, fixing, screw, size, 12 gauge, hex washer face, 35 mm, galvanised, stainless steel, nzbc e2as1 t18, d, embedment", ["if( expression( function( is), atom( relation( type), variable( wall cladding)), data( masonry veneer))), then( obligation( and( expression( function( connect), atom( variable( wall cladding)), data( framing)), expression( function( for), atom( variable( framing)), data( wall)), expression( function( by), atom( relation( fixing), variable( wall cladding)), data( wall tie)), expression( function( as per), atom( variable( wall tie)), data( nzs 4210)), expression( function( as per), atom( variable( wall tie)), data( nzbc e2as1 t18.a)), expression( function( as per), atom( variable( wall tie)), data( nzbc e2as1 t18.b)), expression( function( as per), atom( variable( wall tie)), data( nzbc e2as1 t18.c)), expression( function( as per), atom( relation( spacing), variable( wall tie)), data( nzs 4210)), expression( function( as per), atom( relation( spacing), variable( wall tie)), data( nzbc e2as1 t18.a)), expression( function( as per), atom( relation( spacing), variable( wall tie)), data( nzbc e2as1 t18.b)), expression( function( as per), atom( relation( spacing), variable( wall tie)), data( nzbc e2as1 t18.c)), expression( function( as per), atom( relation( embedment), variable( wall tie)), data( nzs 4210)), expression( function( as per), atom( relation( embedment), variable( wall tie)), data( nzbc e2as1 t18.a)), expression( function( as per), atom( relation( embedment), variable( wall tie)), data( nzbc e2as1 t18.b)), expression( function( as per), atom( relation( embedment), variable( wall tie)), data( nzbc e2as1 t18.c)), expression( function( for), atom( variable( fixing)), data( wall tie)), expression( function( is), atom( relation( type), variable( fixing)), data( screw)), expression( function( greater than equal), atom( relation( size), variable( screw)), data( 12 gauge)), expression( function( has), atom( variable( screw)), data( hex washer face)), expression( function( greater than equal), atom( relation( length), variable( hex washer face)), data( baseunit( prefix( milli), kind( metre)), value( 35.0))), or( expression( function( is), atom( relation( material), variable( screw)), data( galvanised steel)), expression( function( is), atom( relation( material), variable( screw)), data( stainless steel))))))"], "if( and( expression( function( is), atom( relation( material), variable( wall cladding)), data( masonry veneer)), expression( function( has), atom( variable( wall cladding)), data( wall tie)))), then( obligation( and( expression( function( by), atom( relation( spacing), variable( wall tie)), data( nzs 4210)), expression( function( by), atom( relation( spacing), variable( wall tie)), data( nzs 4210 t18.a)), expression( function( by), atom( relation( spacing), variable( wall tie)), data( nzs 4210 b)), expression( function( by), atom( relation( spacing), variable( wall tie)), data( nzs 4210 c)), expression( function( has), atom( variable( wall tie)), data( fixing)), expression( function( is), atom( relation( type), variable( fixing)), data( screw)), expression( function( greater than equal), atom( relation( size), variable( screw)), data( 12 gauge)), expression( function( is), atom( relation( hex washer face), variable( screw)), data( baseunit( prefix( milli), kind( metre)), value( 35.0))), or( expression( function( is), atom( relation( type), variable( screw)), data( galvanised)), expression( function( is), atom( relation( type), variable( screw)), data( stainless steel))), expression( function( comply with), atom( variable( screw)), data( nzbc e2as1 t18.d)))))", "if( is( wall cladding. type, masonry veneer)), then( obligation( and( connect( wall cladding, framing), for( framing, wall), by( wall cladding. fixing, wall tie), as per( wall tie, and( nzs 4210, nzbc e2as1 t18.a, nzbc e2as1 t18.b, nzbc e2as1 t18.c)), as per( wall tie. spacing, and( nzs 4210, nzbc e2as1 t18.a, nzbc e2as1 t18.b, nzbc e2as1 t18.c)), as per( wall tie. embedment, and( nzs 4210, nzbc e2as1 t18.a, nzbc e2as1 t18.b, nzbc e2as1 t18.c)), for( fixing, wall tie), is( fixing. type, screw), greater than equal( screw. size, 12 gauge), has( screw, hex washer face), greater than equal( hex washer face. length, 35 mm), is( screw. material, or( galvanised steel, stainless steel)))))", "if( and( is( wall cladding. material, masonry veneer), has( wall cladding, wall tie))), then( obligation( and( by( wall tie. spacing, and( nzs 4210, nzs 4210 t18.a, nzs 4210 b, nzs 4210 c)), has( wall tie, fixing), is( fixing. type, screw), greater than equal( screw. size, 12 gauge), is( screw. hex washer face, 35 mm), is( screw. type, or( galvanised, stainless steel)), comply with( screw, nzbc e2as1 t18.d, embedment))))"], ["translate English to LegalRuleML: E2AS1 Metal cappings installed over parapets and enclosed balustrades. h) Expansion joints shall be provided for joined cappings with a combined length exceeding: i) 12 metres for light coloured steel and stainless steel, 8 metres for dark coloured steel ii) 8 metres for copper iii) 8 metres for aluminium. capping, material, metal, installation, parapet, balustrade, enclosed, expansion joint, light coloured steel, stainless steel, length, 12 m, dark coloured steel, copper, aluminium, 8 m", ["if( and( expression( function( is), atom( relation( material), variable( capping)), data( metal)), or( expression( function( above), atom( relation( installation), variable( capping)), data( parapet)), expression( function( above), atom( relation( installation), variable( capping)), data( balustrade))), expression( function( is), atom( variable( balustrade)), data( enclosed)), expression( function( has), atom( variable( cappings)), data( join)), or( and( or( expression( function( is), atom( relation( material), variable( capping)), data( light coloured steel)), expression( function( is), atom( relation( material), variable( capping)), data( stainless steel))), expression( function( greater than equal), expression( function( sum), atom( relation( length), variable( cappings))), data( baseunit( kind( metre)), value( 12.0)))), and( or( expression( function( is), atom( relation( material), variable( capping)), data( dark coloured steel)), expression( function( is), atom( relation( material), variable( capping)), data( copper)), expression( function( is), atom( relation( material), variable( capping)), data( aluminium))), expression( function( greater than equal), expression( function( sum), atom( relation( length), variable( cappings))), data( baseunit( kind( metre)), value( 8.0))))))), then( obligation( expression( function( for), atom( variable( expansion joint)), data( cappings))))"], "if( and( expression( function( is), atom( relation( material), variable( capping)), data( metal)), or( expression( function( above), atom( relation( installation), variable( capping)), data( parapet)), expression( function( above), atom( relation( installation), variable( capping)), data( balustrade))), expression( function( is), atom( variable( balustrade)), data( enclosed)))), then( obligation( or( and( expression( function( has), atom( variable( capping)), data( expansion joint)), or( expression( function( is), atom( relation( type), variable( expansion joint)), data( light coloured steel)), expression( function( is), atom( relation( type), variable( expansion joint)), data( stainless steel))), expression( function( greater than), expression( function( sum), atom( relation( length), variable( expansion joint))), data( baseunit( kind( metre)), value( 12.0)))), and( expression( function( is), atom( relation( type), variable( expansion joint)), data( dark coloured steel)), expression( function( is), atom( relation( type), variable( expansion joint)), data( stainless steel)), expression( function( less than equal), expression( function( sum), atom( relation( length), variable( expansion joint))), data( baseunit( kind( metre)), value( 8.0)))), and( or( expression( function( has), atom( relation( type), variable( expansion joint)), data( dark coloured steel)), expression( function( has), atom( relation( type), variable( expansion joint)), data( copper)), expression( function( has), atom( relation( type), variable( expansion joint)), data( aluminium))), expression( function( less than equal), atom( relation( length), variable( expansion joint)), data( baseunit( kind( metre)), value( 8.0)))))))", "if( and( is( capping. material, metal), above( capping. installation, or( parapet, balustrade)), is( balustrade, enclosed), has( cappings, join), or( and( is( capping. material, or( light coloured steel, stainless steel)), greater than equal( sum( cappings. length), 12 m)), and( is( capping. material, or( dark coloured steel, copper, aluminium)), greater than equal( sum( cappings. length), 8 m))))), then( obligation( for( expansion joint, cappings)))", "if( and( is( capping. material, metal), above( capping. installation, or( parapet, balustrade)), is( balustrade, enclosed))), then( obligation( or( and( has( capping, expansion joint), is( expansion joint. type, or( light coloured steel, stainless steel)), greater than( sum( expansion joint. length), 12 m)), and( is( expansion joint. type, and( dark coloured steel, stainless steel)), less than equal( sum( expansion joint. length), 8 m)), and( has( expansion joint. type, or( dark coloured steel, copper, aluminium)), less than equal( expansion joint. length, 8 m)))))"], ["translate English to LegalRuleML: E2AS1 Butyl rubber and EPDM cappings shall comply with the following requirements: b) Sides of membrane cappings shall overlap the wall claddings as outlined in Table 7. capping, material, butyl rubber, epdm, side, wall cladding, nzbc e2as1 t7", ["if( or( expression( function( is), atom( relation( material), variable( capping)), data( butyl rubber)), expression( function( is), atom( relation( material), variable( capping)), data( epdm)))), then( obligation( and( expression( function( has), atom( variable( capping)), data( side)), expression( function( towards), atom( relation( lap), variable( side)), data( wall cladding)), expression( function( as per), atom( relation( lap), variable( side)), data( nzbc e2as1 t7)))))"], "if( or( expression( function( is), atom( relation( material), variable( capping)), data( butyl rubber)), expression( function( is), atom( relation( material), variable( capping)), data( epdm)))), then( obligation( and( expression( function( has), atom( variable( capping)), data( side)), expression( function( adjoin), atom( variable( side)), data( wall cladding)), expression( function( as per), atom( variable( side)), data( nzbc e2as1 t7)))))", "if( is( capping. material, or( butyl rubber, epdm))), then( obligation( and( has( capping, side), towards( side. lap, wall cladding), as per( side. lap, nzbc e2as1 t7))))", "if( is( capping. material, or( butyl rubber, epdm))), then( obligation( and( has( capping, side), adjoin( side, wall cladding), as per( side, nzbc e2as1 t7))))"], ["translate English to LegalRuleML: E2AS1 The level of the upper surface of the slatted deck: a) Shall be a minimum of 50 mm below the threshold level for cantilevered decks as shown in Figures 14(b) and 16. deck, type, slatted, upper surface, level, 'x0 + 50 mm', threshold, cantilevered, nzbc e2as1 f14, b, nzbc e2-as1 f16", ["if( and( expression( function( is), atom( variable( deck)), data( slatted)), expression( function( is), atom( variable( deck)), data( cantilevered)))), then( obligation( and( expression( function( define), atom( relation( threshold level), variable( deck)), data( x0)), expression( function( less than equal), atom( relation( upper surface level), variable( deck)), data( 'x0 - 50 mm')), expression( function( as per), atom( relation( upper surface level), variable( deck)), data( nzbc e2as1 f14.b)), expression( function( as per), atom( relation( upper surface level), variable( deck)), data( nzbc e2as1 f16)))))"], "if( expression( function( is), atom( relation( type), variable( deck)), data( slatted))), then( obligation( and( expression( function( define), atom( relation( upper surface), variable( deck)), data( x0)), expression( function( greater than equal), atom( relation( level), variable( upper surface)), data( 'x0 + 50 mm')), or( and( expression( function( is), atom( relation( threshold), variable( deck)), data( cantilevered)), expression( function( as per), atom( relation( threshold), variable( deck)), data( nzbc e2as1 f14.b)), expression( function( as per), atom( relation( threshold), variable( deck)), data( nzbc e2-as1 f16)))))))", "if( is( deck, and( slatted, cantilevered))), then( obligation( and( define( deck. threshold level, x0), less than equal( deck. upper surface level, 'x0 - 50 mm'), as per( deck. upper surface level, and( nzbc e2as1 f14.b, nzbc e2as1 f16)))))", "if( is( deck. type, slatted)), then( obligation( and( define( deck. upper surface, x0), greater than equal( upper surface. level, 'x0 + 50 mm'), or( and( is( deck. threshold, cantilevered), as per( deck. threshold, and( nzbc e2as1 f14.b, nzbc e2-as1 f16))))))"], ["translate English to LegalRuleML: E2AS1 Prevent sagging of roof underlay by either: For R1 underlays, fully support with a corrosion resistant material \u2022 For R2 self supporting underlays, laid to maximum 1.2 metre span between adjacent supports. roof, underlay, type, r1, support, full, material, corrosion resistant, r2, self supporting, span, 1.2 m", ["if( expression( function( has), atom( variable( roof)), data( underlay))), then( obligation( or( and( expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( has), atom( variable( underlay)), data( support)), expression( function( is), atom( relation( material), variable( support)), data( corrosion resistant))), and( expression( function( is), atom( relation( type), variable( underlay)), data( r2)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2))), expression( function( in between), atom( relation( span), variable( underlay)), data( adjacent supports))))))"], "if( and( expression( function( is), atom( relation( underlay), variable( roof)), data( type)), expression( function( is), atom( relation( type), variable( underlay)), data( r1)), expression( function( is), atom( relation( support), variable( underlay)), data( full)), expression( function( is), atom( relation( material), variable( underlay)), data( corrosion resistant)))), then( obligation( or( and( expression( function( for), atom( variable( underlay)), data( roof)), expression( function( is), atom( variable( underlay)), data( type)), expression( function( is), atom( variable( underlay)), data( self supporting)), expression( function( less than equal), atom( relation( span), variable( underlay)), data( baseunit( kind( metre)), value( 1.2)))))))", "if( has( roof, underlay)), then( obligation( or( and( is( underlay. type, r1), has( underlay, support), is( support. material, corrosion resistant)), and( is( underlay. type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m), in between( underlay. span, adjacent supports)))))", "if( and( is( roof. underlay, type), is( underlay. type, r1), is( underlay. support, full), is( underlay. material, corrosion resistant))), then( obligation( or( and( for( underlay, roof), is( underlay, type, r2), is( underlay, self supporting), less than equal( underlay. span, 1.2 m)))))"], ["translate English to LegalRuleML: E2AS1 Valley gutters be minimum 250 mm wide where receiving run off from spreaders. gutter, type, valley, run off, spreader, width, 250 mm", ["if( and( expression( function( is), atom( relation( type), variable( gutter)), data( valley)), expression( function( into), atom( relation( discharge), variable( spreader)), data( gutter)))), then( obligation( expression( function( greater than equal), atom( relation( width), variable( gutter)), data( baseunit( prefix( milli), kind( metre)), value( 250.0)))))"], "if( and( expression( function( is), atom( relation( type), variable( gutter)), data( valley)), expression( function( has), atom( variable( gutter)), data( run off)), expression( function( has), atom( variable( spreader)), data( run off)))), then( obligation( expression( function( greater than equal), atom( relation( width), variable( gutter)), data( baseunit( prefix( milli), kind( metre)), value( 250.0)))))", "if( and( is( gutter. type, valley), into( spreader. discharge, gutter))), then( obligation( greater than equal( gutter. width, 250 mm)))", "if( and( is( gutter. type, valley), has( gutter, run off), has( spreader, run off))), then( obligation( greater than equal( gutter. width, 250 mm)))"]], "ncols": 5, "nrows": 71}